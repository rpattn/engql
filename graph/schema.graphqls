# Organization types
type Organization {
  id: String!
  name: String!
  description: String
  createdAt: String!
  updatedAt: String!
}

directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

input CreateOrganizationInput {
  name: String!
  description: String
}

input UpdateOrganizationInput {
  id: String!
  name: String
  description: String
}

# Entity Schema types
type FieldDefinition {
  name: String!
  type: FieldType!
  required: Boolean!
  description: String
  default: String
  validation: String
  referenceEntityType: String
}

enum FieldType {
  STRING
  INTEGER
  FLOAT
  BOOLEAN
  TIMESTAMP
  JSON
  FILE_REFERENCE
  GEOMETRY
  TIMESERIES
  REFERENCE
  ENTITY_REFERENCE
  ENTITY_REFERENCE_ARRAY
}

enum JoinSide {
  LEFT
  RIGHT
}

enum JoinSortDirection {
  ASC
  DESC
}

enum SortDirection {
  ASC
  DESC
}

enum EntitySortField {
  CREATED_AT
  UPDATED_AT
  ENTITY_TYPE
  PATH
  VERSION
  PROPERTY
}

enum JoinType {
  REFERENCE
  CROSS
}

type EntitySchema {
  id: String!
  organizationId: String!
  name: String!
  description: String
  fields: [FieldDefinition!]!
  version: String!
  status: SchemaStatus!
  previousVersionId: String
  createdAt: String!
  updatedAt: String!
}

enum SchemaStatus {
  ACTIVE
  DEPRECATED
  ARCHIVED
  DRAFT
}

input CreateEntitySchemaInput {
  organizationId: String!
  name: String!
  description: String
  fields: [FieldDefinitionInput!]!
}

input FieldDefinitionInput {
  name: String!
  type: FieldType!
  required: Boolean = false
  description: String
  default: String
  validation: String
  referenceEntityType: String
}

input UpdateEntitySchemaInput {
  id: String!
  name: String
  description: String
  fields: [FieldDefinitionInput!]
}

# Entity types
type Entity {
  id: String!
  organizationId: String!
  schemaId: String!
  entityType: String!
  path: String!
  properties: String!
  referenceValue: String
  version: Int!
  createdAt: String!
  updatedAt: String!

  linkedEntities: [Entity!]! @goField(forceResolver: true)
}

type EntitySnapshotView {
  version: Int!
  path: String!
  schemaId: String!
  entityType: String!
  canonicalText: [String!]!
}

type EntityDiffResult {
  base: EntitySnapshotView
  target: EntitySnapshotView
  unifiedDiff: String
}

input CreateEntityInput {
  organizationId: String!
  entityType: String!
  path: String
  properties: String!
  linkedEntityId: String
  linkedEntityIds: [String!]
  linkedEntityReference: String
  linkedEntityReferences: [String!]
}

input UpdateEntityInput {
  id: String!
  entityType: String
  path: String
  properties: String
}

# Filter types
input EntityFilter {
  entityType: String
  propertyFilters: [PropertyFilter!]
  textSearch: String
  pathFilter: PathFilter
}

input EntitySortInput {
  field: EntitySortField!
  direction: SortDirection = ASC
  propertyKey: String
}

input PropertyFilter {
  key: String!
  value: String
  exists: Boolean
  inArray: [String!]
}

type PropertyFilterConfig {
  key: String!
  value: String
  exists: Boolean
  inArray: [String!]
}

type JoinSortCriterion {
  side: JoinSide!
  field: String!
  direction: JoinSortDirection!
}

type EntityJoinDefinition {
  id: String!
  organizationId: String!
  name: String!
  description: String
  leftEntityType: String!
  rightEntityType: String!
  joinType: JoinType!
  joinField: String
  joinFieldType: FieldType
  leftFilters: [PropertyFilterConfig!]!
  rightFilters: [PropertyFilterConfig!]!
  sortCriteria: [JoinSortCriterion!]!
  createdAt: String!
  updatedAt: String!
}

# Entity transformation types
enum EntityTransformationNodeType {
  LOAD
  FILTER
  PROJECT
  JOIN
  LEFT_JOIN
  ANTI_JOIN
  UNION
  MATERIALIZE
  SORT
  PAGINATE
}

type EntityTransformation {
  id: String!
  organizationId: String!
  name: String!
  description: String
  nodes: [EntityTransformationNode!]!
  createdAt: String!
  updatedAt: String!
}

type EntityTransformationNode {
  id: String!
  name: String!
  type: EntityTransformationNodeType!
  inputs: [String!]!
  load: EntityTransformationLoadConfig
  filter: EntityTransformationFilterConfig
  project: EntityTransformationProjectConfig
  join: EntityTransformationJoinConfig
  materialize: EntityTransformationMaterializeConfig
  sort: EntityTransformationSortConfig
  paginate: EntityTransformationPaginateConfig
}

type EntityTransformationLoadConfig {
  alias: String!
  entityType: String!
  filters: [PropertyFilterConfig!]!
}

type EntityTransformationFilterConfig {
  alias: String!
  filters: [PropertyFilterConfig!]!
}

type EntityTransformationProjectConfig {
  alias: String!
  fields: [String!]!
}

type EntityTransformationMaterializeConfig {
  outputs: [EntityTransformationMaterializeOutput!]!
}

type EntityTransformationMaterializeOutput {
  alias: String!
  fields: [EntityTransformationMaterializeFieldMapping!]!
}

type EntityTransformationMaterializeFieldMapping {
  sourceAlias: String!
  sourceField: String!
  outputField: String!
}

type EntityTransformationJoinConfig {
  leftAlias: String!
  rightAlias: String!
  onField: String!
}

type EntityTransformationSortConfig {
  alias: String!
  field: String!
  direction: JoinSortDirection!
}

type EntityTransformationPaginateConfig {
  limit: Int
  offset: Int
}

type EntityTransformationRecordEntity {
  alias: String!
  entity: Entity
}

type EntityTransformationRecordEdge {
  entities: [EntityTransformationRecordEntity!]!
}

type EntityTransformationConnection {
  edges: [EntityTransformationRecordEdge!]!
  pageInfo: PageInfo!
}

input EntityTransformationNodeInput {
  id: String
  name: String!
  type: EntityTransformationNodeType!
  inputs: [String!]
  load: EntityTransformationLoadConfigInput
  filter: EntityTransformationFilterConfigInput
  project: EntityTransformationProjectConfigInput
  join: EntityTransformationJoinConfigInput
  materialize: EntityTransformationMaterializeConfigInput
  sort: EntityTransformationSortConfigInput
  paginate: EntityTransformationPaginateConfigInput
}

input EntityTransformationLoadConfigInput {
  alias: String!
  entityType: String!
  filters: [PropertyFilter!]
}

input EntityTransformationFilterConfigInput {
  alias: String!
  filters: [PropertyFilter!]
}

input EntityTransformationProjectConfigInput {
  alias: String!
  fields: [String!]!
}

input EntityTransformationMaterializeConfigInput {
  outputs: [EntityTransformationMaterializeOutputInput!]!
}

input EntityTransformationMaterializeOutputInput {
  alias: String!
  fields: [EntityTransformationMaterializeFieldMappingInput!]!
}

input EntityTransformationMaterializeFieldMappingInput {
  sourceAlias: String!
  sourceField: String!
  outputField: String!
}

input EntityTransformationJoinConfigInput {
  leftAlias: String!
  rightAlias: String!
  onField: String!
}

input EntityTransformationSortConfigInput {
  alias: String!
  field: String!
  direction: JoinSortDirection!
}

input EntityTransformationPaginateConfigInput {
  limit: Int
  offset: Int
}

input CreateEntityTransformationInput {
  organizationId: String!
  name: String!
  description: String
  nodes: [EntityTransformationNodeInput!]!
}

input UpdateEntityTransformationInput {
  id: String!
  name: String
  description: String
  nodes: [EntityTransformationNodeInput!]
}

input ExecuteEntityTransformationInput {
  transformationId: String!
  pagination: PaginationInput
}

type EntityJoinEdge {
  left: Entity!
  right: Entity!
}

type EntityJoinConnection {
  edges: [EntityJoinEdge!]!
  pageInfo: PageInfo!
}

input PathFilter {
  ancestorsOf: String
  descendantsOf: String
  childrenOf: String
  siblingsOf: String
}

# Pagination
input PaginationInput {
  limit: Int = 10
  offset: Int = 0
}

input JoinSortInput {
  side: JoinSide!
  field: String!
  direction: JoinSortDirection = ASC
}

input CreateEntityJoinDefinitionInput {
  organizationId: String!
  name: String!
  description: String
  joinType: JoinType = REFERENCE
  leftEntityType: String!
  rightEntityType: String!
  joinField: String
  leftFilters: [PropertyFilter!]
  rightFilters: [PropertyFilter!]
  sortCriteria: [JoinSortInput!]
}

input UpdateEntityJoinDefinitionInput {
  id: String!
  name: String
  description: String
  joinType: JoinType
  leftEntityType: String
  rightEntityType: String
  joinField: String
  leftFilters: [PropertyFilter!]
  rightFilters: [PropertyFilter!]
  sortCriteria: [JoinSortInput!]
}

input ExecuteEntityJoinInput {
  joinId: String!
  leftFilters: [PropertyFilter!]
  rightFilters: [PropertyFilter!]
  sortCriteria: [JoinSortInput!]
  pagination: PaginationInput
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalCount: Int!
}

# Queries
type Query {
  # Organization queries
  organizations: [Organization!]!
  organization(id: String!): Organization
  organizationByName(name: String!): Organization

  # Entity schema queries
  entitySchemas(organizationId: String!): [EntitySchema!]!
  entitySchema(id: String!): EntitySchema
  entitySchemaByName(organizationId: String!, name: String!): EntitySchema
  entitySchemaVersions(organizationId: String!, name: String!): [EntitySchema!]!

  # Entity queries
  entities(
    organizationId: String!
    filter: EntityFilter
    pagination: PaginationInput
    sort: EntitySortInput
  ): EntityConnection!
  entity(id: String!): Entity
  entitiesByType(organizationId: String!, entityType: String!): [Entity!]!
  entitiesByIDs(ids: [String!]!): [Entity!]!
  entityDiff(id: String!, baseVersion: Int!, targetVersion: Int!): EntityDiffResult
  entityHistory(id: String!): [EntitySnapshotView!]!

  # Hierarchical queries
  getEntityAncestors(entityId: String!): [Entity!]!
  getEntityDescendants(entityId: String!): [Entity!]!
  getEntityChildren(entityId: String!): [Entity!]!
  getEntitySiblings(entityId: String!): [Entity!]!
  getEntityHierarchy(entityId: String!): EntityHierarchy!
  
  # JSONB property queries
  searchEntitiesByProperty(organizationId: String!, propertyKey: String!, propertyValue: String!): [Entity!]!
  searchEntitiesByMultipleProperties(organizationId: String!, filters: String!): [Entity!]!
  searchEntitiesByPropertyRange(organizationId: String!, propertyKey: String!, minValue: Float, maxValue: Float): [Entity!]!
  searchEntitiesByPropertyExists(organizationId: String!, propertyKey: String!): [Entity!]!
  searchEntitiesByPropertyContains(organizationId: String!, propertyKey: String!, searchTerm: String!): [Entity!]!
  validateEntityAgainstSchema(entityId: String!): ValidationResult!

  # Join definition queries
  entityJoinDefinition(id: String!): EntityJoinDefinition
  entityJoinDefinitions(organizationId: String!): [EntityJoinDefinition!]!
  executeEntityJoin(input: ExecuteEntityJoinInput!): EntityJoinConnection!

  # Entity transformation queries
  entityTransformation(id: String!): EntityTransformation
  entityTransformations(organizationId: String!): [EntityTransformation!]!
  executeEntityTransformation(input: ExecuteEntityTransformationInput!): EntityTransformationConnection!
  transformationExecution(
    transformationId: String!
    filters: [TransformationExecutionFilterInput!]
    sort: TransformationExecutionSortInput
    pagination: PaginationInput
  ): TransformationExecutionConnection!

  # Entity export queries
  entityExportJob(id: String!): EntityExportJob
  entityExportJobs(
    organizationId: String!
    statuses: [EntityExportJobStatus!]
    limit: Int
    offset: Int
  ): [EntityExportJob!]!
}

type EntityConnection {
  entities: [Entity!]!
  pageInfo: PageInfo!
}

type TransformationExecutionColumn {
  key: String!
  alias: String!
  field: String!
  label: String!
  sourceAlias: String!
  sourceField: String!
}

type TransformationExecutionValue {
  columnKey: String!
  value: String
}

type TransformationExecutionRow {
  values: [TransformationExecutionValue!]!
}

type TransformationExecutionConnection {
  columns: [TransformationExecutionColumn!]!
  rows: [TransformationExecutionRow!]!
  pageInfo: PageInfo!
}

input TransformationExecutionFilterInput {
  alias: String!
  field: String!
  value: String
  exists: Boolean
  inArray: [String!]
}

input TransformationExecutionSortInput {
  alias: String!
  field: String!
  direction: SortDirection = ASC
}

# Hierarchical data types
type EntityHierarchy {
  current: Entity!
  ancestors: [Entity!]!
  children: [Entity!]!
  siblings: [Entity!]!
}

# JSONB query types
type ValidationResult {
  isValid: Boolean!
  errors: [String!]!
  warnings: [String!]!
}

# Mutations
type Mutation {
  # Organization mutations
  createOrganization(input: CreateOrganizationInput!): Organization!
  updateOrganization(input: UpdateOrganizationInput!): Organization!
  deleteOrganization(id: String!): Boolean!

  # Entity schema mutations
  createEntitySchema(input: CreateEntitySchemaInput!): EntitySchema!
  updateEntitySchema(input: UpdateEntitySchemaInput!): EntitySchema!
  deleteEntitySchema(id: String!): Boolean!
  addFieldToSchema(schemaId: String!, field: FieldDefinitionInput!): EntitySchema!
  removeFieldFromSchema(schemaId: String!, fieldName: String!): EntitySchema!
  rollbackEntity(id: String!, toVersion: Int!, reason: String): Entity!

  # Entity mutations
  createEntity(input: CreateEntityInput!): Entity!
  updateEntity(input: UpdateEntityInput!): Entity!
  deleteEntity(id: String!): Boolean!

  # Join definition mutations
  createEntityJoinDefinition(input: CreateEntityJoinDefinitionInput!): EntityJoinDefinition!
  updateEntityJoinDefinition(input: UpdateEntityJoinDefinitionInput!): EntityJoinDefinition!
  deleteEntityJoinDefinition(id: String!): Boolean!

  # Entity transformation mutations
  createEntityTransformation(input: CreateEntityTransformationInput!): EntityTransformation!
  updateEntityTransformation(input: UpdateEntityTransformationInput!): EntityTransformation!
  deleteEntityTransformation(id: String!): Boolean!

  # Entity export mutations
  queueEntityTypeExport(input: QueueEntityTypeExportInput!): EntityExportJob!
  queueTransformationExport(input: QueueTransformationExportInput!): EntityExportJob!
  cancelEntityExportJob(id: String!): EntityExportJob!
}

# Entity export types
enum EntityExportJobType {
  ENTITY_TYPE
  TRANSFORMATION
}

enum EntityExportJobStatus {
  PENDING
  RUNNING
  COMPLETED
  CANCELLED
  FAILED
}

type EntityExportJob {
  id: String!
  organizationId: String!
  jobType: EntityExportJobType!
  entityType: String
  transformationId: String
  status: EntityExportJobStatus!
  rowsRequested: Int!
  rowsExported: Int!
  bytesWritten: Int!
  fileMimeType: String
  fileByteSize: Int
  errorMessage: String
  filters: [PropertyFilterConfig!]!
  transformationDefinition: EntityTransformation
  enqueuedAt: String!
  startedAt: String
  completedAt: String
  updatedAt: String!
  downloadUrl: String @goField(forceResolver: true)
}

type EntityExportLog {
  id: String!
  exportJobId: String!
  organizationId: String!
  rowIdentifier: String
  errorMessage: String!
  createdAt: String!
}

input QueueEntityTypeExportInput {
  organizationId: String!
  entityType: String!
  filters: [PropertyFilter!]
}

input QueueTransformationExportInput {
  organizationId: String!
  transformationId: String!
  filters: [PropertyFilter!]
  options: TransformationExecutionOptionsInput
}

input TransformationExecutionOptionsInput {
  limit: Int
  offset: Int
}
