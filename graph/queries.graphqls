query GetOrganizations {
  organizations {
    id
    name
    description
  }
}

query GetEntitiesByOrg($organizationId: String!, $limit: Int = 10, $offset: Int = 0) {
  entities(organizationId: $organizationId, pagination: { limit: $limit, offset: $offset }) {
    entities {
      id
      entityType
      version
      path
      properties
      referenceValue
      createdAt
      updatedAt
    }
    pageInfo {
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
}

# --- Create a new Entity Schema ---
mutation CreateSchema($input: CreateEntitySchemaInput!) {
  createEntitySchema(input: $input) {
    id
    name
    description
    version
    status
    previousVersionId
  }
}

# --- Create a new Entity ---
mutation CreateEntity($input: CreateEntityInput!) {
  createEntity(input: $input) {
    id
    entityType
    schemaId
    version
    properties
  }
}

# --- Update Entity ---
mutation UpdateEntity($input: UpdateEntityInput!) {
  updateEntity(input: $input) {
    id
    organizationId
    schemaId
    entityType
    path
    properties
    version
    updatedAt
  }
}

# --- Delete Entity ---
mutation DeleteEntity($id: String!) {
  deleteEntity(id: $id)
}

# --- Get Entities by Type ---
query EntitiesByTypeFull($organizationId: String!, $entityType: String!) {
  entitiesByType(organizationId: $organizationId, entityType: $entityType) {
    id
    entityType
    schemaId
    version
    properties
    referenceValue
    linkedEntities {
      id
      entityType
      properties
      referenceValue
    }
  }
}

# --- Get Schema Versions ---
query SchemaVersions($organizationId: String!, $name: String!) {
  entitySchemaVersions(organizationId: $organizationId, name: $name) {
    id
    version
    status
    previousVersionId
    createdAt
  }
}

# --- List Entity Schemas ---
query EntitySchemas($organizationId: String!) {
  entitySchemas(organizationId: $organizationId) {
    id
    organizationId
    name
    description
    status
    version
    createdAt
    updatedAt
    previousVersionId
    fields {
      name
      type
      required
      description
      default
      validation
      referenceEntityType
    }
  }
}

# --- Entities management (paginated) ---
query EntitiesManagement(
  $organizationId: String!
  $pagination: PaginationInput
  $filter: EntityFilter
) {
  entities(
    organizationId: $organizationId
    pagination: $pagination
    filter: $filter
  ) {
    entities {
      id
      organizationId
      schemaId
      entityType
      path
      properties
      referenceValue
      version
      createdAt
      updatedAt
      linkedEntities {
        id
        entityType
        properties
        referenceValue
      }
    }
    pageInfo {
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
}

# --- Rollback an Entity to a previous version ---
mutation RollbackEntity($id: String!, $toVersion: Int!, $reason: String) {
  rollbackEntity(id: $id, toVersion: $toVersion, reason: $reason) {
    id
    version
    properties
  }
}

# --- Entities by Type ---
query EntitiesByType($organizationId: String!, $entityType: String!) {
  entitiesByType(organizationId: $organizationId, entityType: $entityType) {
    id
    entityType
    schemaId
    version
    properties
    referenceValue
  }
}

# --- Entity Schema by Name ---
query EntitySchemaByName($organizationId: String!, $name: String!) {
  entitySchemaByName(organizationId: $organizationId, name: $name) {
    id
    name
    description
    version
    status
    previousVersionId
    fields {
      name
      type
      required
      description
    }
  }
}

# --- Create Join Definition ---
mutation CreateJoin($input: CreateEntityJoinDefinitionInput!) {
  createEntityJoinDefinition(input: $input) {
    id
    name
    description
    joinType
    leftEntityType
    rightEntityType
    joinField
    joinFieldType
    createdAt
    updatedAt
    leftFilters {
      key
      value
      exists
      inArray
    }
    rightFilters {
      key
      value
      exists
      inArray
    }
    sortCriteria {
      side
      field
      direction
    }
  }
}

# --- Update Entity Schema ---
mutation UpdateSchema($input: UpdateEntitySchemaInput!) {
  updateEntitySchema(input: $input) {
    id
    organizationId
    name
    description
    status
    version
    createdAt
    updatedAt
    previousVersionId
    fields {
      name
      type
      required
      description
      default
      validation
      referenceEntityType
    }
  }
}

# --- List Join Definitions ---
query EntityJoinDefinitions($organizationId: String!) {
  entityJoinDefinitions(organizationId: $organizationId) {
    id
    name
    description
    joinType
    leftEntityType
    rightEntityType
    joinField
    joinFieldType
    createdAt
    updatedAt
    leftFilters {
      key
      value
      exists
      inArray
    }
    rightFilters {
      key
      value
      exists
      inArray
    }
    sortCriteria {
      side
      field
      direction
    }
  }
}

# --- Delete Entity Schema ---
mutation DeleteSchema($id: String!) {
  deleteEntitySchema(id: $id)
}

# --- Delete Join Definition ---
mutation DeleteJoin($id: String!) {
  deleteEntityJoinDefinition(id: $id)
}

# --- Execute Join ---
query ExecuteJoin($input: ExecuteEntityJoinInput!) {
  executeEntityJoin(input: $input) {
    edges {
      left {
        id
        entityType
        properties
      }
      right {
        id
        entityType
        properties
      }
    }
    pageInfo {
      totalCount
      hasNextPage
      hasPreviousPage
    }
  }
}

