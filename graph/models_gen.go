// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type CreateEntityInput struct {
	OrganizationID  string   `json:"organizationId"`
	EntityType      string   `json:"entityType"`
	Path            *string  `json:"path,omitempty"`
	Properties      string   `json:"properties"`
	LinkedEntityID  *string  `json:"linkedEntityId,omitempty"`
	LinkedEntityIds []string `json:"linkedEntityIds,omitempty"`
}

type CreateEntityJoinDefinitionInput struct {
	OrganizationID  string            `json:"organizationId"`
	Name            string            `json:"name"`
	Description     *string           `json:"description,omitempty"`
	JoinType        *JoinType         `json:"joinType,omitempty"`
	LeftEntityType  string            `json:"leftEntityType"`
	RightEntityType string            `json:"rightEntityType"`
	JoinField       *string           `json:"joinField,omitempty"`
	LeftFilters     []*PropertyFilter `json:"leftFilters,omitempty"`
	RightFilters    []*PropertyFilter `json:"rightFilters,omitempty"`
	SortCriteria    []*JoinSortInput  `json:"sortCriteria,omitempty"`
}

type CreateEntitySchemaInput struct {
	OrganizationID string                  `json:"organizationId"`
	Name           string                  `json:"name"`
	Description    *string                 `json:"description,omitempty"`
	Fields         []*FieldDefinitionInput `json:"fields"`
}

type CreateOrganizationInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
}

type Entity struct {
	ID             string    `json:"id"`
	OrganizationID string    `json:"organizationId"`
	SchemaID       string    `json:"schemaId"`
	EntityType     string    `json:"entityType"`
	Path           string    `json:"path"`
	Properties     string    `json:"properties"`
	Version        int       `json:"version"`
	CreatedAt      string    `json:"createdAt"`
	UpdatedAt      string    `json:"updatedAt"`
	LinkedEntities []*Entity `json:"linkedEntities"`
}

type EntityConnection struct {
	Entities []*Entity `json:"entities"`
	PageInfo *PageInfo `json:"pageInfo"`
}

type EntityFilter struct {
	EntityType      *string           `json:"entityType,omitempty"`
	PropertyFilters []*PropertyFilter `json:"propertyFilters,omitempty"`
	TextSearch      *string           `json:"textSearch,omitempty"`
	PathFilter      *PathFilter       `json:"pathFilter,omitempty"`
}

type EntityHierarchy struct {
	Current   *Entity   `json:"current"`
	Ancestors []*Entity `json:"ancestors"`
	Children  []*Entity `json:"children"`
	Siblings  []*Entity `json:"siblings"`
}

type EntityJoinConnection struct {
	Edges    []*EntityJoinEdge `json:"edges"`
	PageInfo *PageInfo         `json:"pageInfo"`
}

type EntityJoinDefinition struct {
	ID              string                  `json:"id"`
	OrganizationID  string                  `json:"organizationId"`
	Name            string                  `json:"name"`
	Description     *string                 `json:"description,omitempty"`
	LeftEntityType  string                  `json:"leftEntityType"`
	RightEntityType string                  `json:"rightEntityType"`
	JoinType        JoinType                `json:"joinType"`
	JoinField       *string                 `json:"joinField,omitempty"`
	JoinFieldType   *FieldType              `json:"joinFieldType,omitempty"`
	LeftFilters     []*PropertyFilterConfig `json:"leftFilters"`
	RightFilters    []*PropertyFilterConfig `json:"rightFilters"`
	SortCriteria    []*JoinSortCriterion    `json:"sortCriteria"`
	CreatedAt       string                  `json:"createdAt"`
	UpdatedAt       string                  `json:"updatedAt"`
}

type EntityJoinEdge struct {
	Left  *Entity `json:"left"`
	Right *Entity `json:"right"`
}

type EntitySchema struct {
	ID                string             `json:"id"`
	OrganizationID    string             `json:"organizationId"`
	Name              string             `json:"name"`
	Description       *string            `json:"description,omitempty"`
	Fields            []*FieldDefinition `json:"fields"`
	Version           string             `json:"version"`
	Status            SchemaStatus       `json:"status"`
	PreviousVersionID *string            `json:"previousVersionId,omitempty"`
	CreatedAt         string             `json:"createdAt"`
	UpdatedAt         string             `json:"updatedAt"`
}

type ExecuteEntityJoinInput struct {
	JoinID       string            `json:"joinId"`
	LeftFilters  []*PropertyFilter `json:"leftFilters,omitempty"`
	RightFilters []*PropertyFilter `json:"rightFilters,omitempty"`
	SortCriteria []*JoinSortInput  `json:"sortCriteria,omitempty"`
	Pagination   *PaginationInput  `json:"pagination,omitempty"`
}

type FieldDefinition struct {
	Name                string    `json:"name"`
	Type                FieldType `json:"type"`
	Required            bool      `json:"required"`
	Description         *string   `json:"description,omitempty"`
	Default             *string   `json:"default,omitempty"`
	Validation          *string   `json:"validation,omitempty"`
	ReferenceEntityType *string   `json:"referenceEntityType,omitempty"`
}

type FieldDefinitionInput struct {
	Name                string    `json:"name"`
	Type                FieldType `json:"type"`
	Required            *bool     `json:"required,omitempty"`
	Description         *string   `json:"description,omitempty"`
	Default             *string   `json:"default,omitempty"`
	Validation          *string   `json:"validation,omitempty"`
	ReferenceEntityType *string   `json:"referenceEntityType,omitempty"`
}

type JoinSortCriterion struct {
	Side      JoinSide          `json:"side"`
	Field     string            `json:"field"`
	Direction JoinSortDirection `json:"direction"`
}

type JoinSortInput struct {
	Side      JoinSide           `json:"side"`
	Field     string             `json:"field"`
	Direction *JoinSortDirection `json:"direction,omitempty"`
}

type Mutation struct {
}

type Organization struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	CreatedAt   string  `json:"createdAt"`
	UpdatedAt   string  `json:"updatedAt"`
}

type PageInfo struct {
	HasNextPage     bool `json:"hasNextPage"`
	HasPreviousPage bool `json:"hasPreviousPage"`
	TotalCount      int  `json:"totalCount"`
}

type PaginationInput struct {
	Limit  *int `json:"limit,omitempty"`
	Offset *int `json:"offset,omitempty"`
}

type PathFilter struct {
	AncestorsOf   *string `json:"ancestorsOf,omitempty"`
	DescendantsOf *string `json:"descendantsOf,omitempty"`
	ChildrenOf    *string `json:"childrenOf,omitempty"`
	SiblingsOf    *string `json:"siblingsOf,omitempty"`
}

type PropertyFilter struct {
	Key     string   `json:"key"`
	Value   *string  `json:"value,omitempty"`
	Exists  *bool    `json:"exists,omitempty"`
	InArray []string `json:"inArray,omitempty"`
}

type PropertyFilterConfig struct {
	Key     string   `json:"key"`
	Value   *string  `json:"value,omitempty"`
	Exists  *bool    `json:"exists,omitempty"`
	InArray []string `json:"inArray,omitempty"`
}

type Query struct {
}

type UpdateEntityInput struct {
	ID         string  `json:"id"`
	EntityType *string `json:"entityType,omitempty"`
	Path       *string `json:"path,omitempty"`
	Properties *string `json:"properties,omitempty"`
}

type UpdateEntityJoinDefinitionInput struct {
	ID              string            `json:"id"`
	Name            *string           `json:"name,omitempty"`
	Description     *string           `json:"description,omitempty"`
	JoinType        *JoinType         `json:"joinType,omitempty"`
	LeftEntityType  *string           `json:"leftEntityType,omitempty"`
	RightEntityType *string           `json:"rightEntityType,omitempty"`
	JoinField       *string           `json:"joinField,omitempty"`
	LeftFilters     []*PropertyFilter `json:"leftFilters,omitempty"`
	RightFilters    []*PropertyFilter `json:"rightFilters,omitempty"`
	SortCriteria    []*JoinSortInput  `json:"sortCriteria,omitempty"`
}

type UpdateEntitySchemaInput struct {
	ID          string                  `json:"id"`
	Name        *string                 `json:"name,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Fields      []*FieldDefinitionInput `json:"fields,omitempty"`
}

type UpdateOrganizationInput struct {
	ID          string  `json:"id"`
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type ValidationResult struct {
	IsValid  bool     `json:"isValid"`
	Errors   []string `json:"errors"`
	Warnings []string `json:"warnings"`
}

type FieldType string

const (
	FieldTypeString               FieldType = "STRING"
	FieldTypeInteger              FieldType = "INTEGER"
	FieldTypeFloat                FieldType = "FLOAT"
	FieldTypeBoolean              FieldType = "BOOLEAN"
	FieldTypeTimestamp            FieldType = "TIMESTAMP"
	FieldTypeJSON                 FieldType = "JSON"
	FieldTypeFileReference        FieldType = "FILE_REFERENCE"
	FieldTypeGeometry             FieldType = "GEOMETRY"
	FieldTypeTimeseries           FieldType = "TIMESERIES"
	FieldTypeEntityReference      FieldType = "ENTITY_REFERENCE"
	FieldTypeEntityReferenceArray FieldType = "ENTITY_REFERENCE_ARRAY"
	FieldTypeEntityID             FieldType = "ENTITY_ID"
)

var AllFieldType = []FieldType{
	FieldTypeString,
	FieldTypeInteger,
	FieldTypeFloat,
	FieldTypeBoolean,
	FieldTypeTimestamp,
	FieldTypeJSON,
	FieldTypeFileReference,
	FieldTypeGeometry,
	FieldTypeTimeseries,
	FieldTypeEntityReference,
	FieldTypeEntityReferenceArray,
	FieldTypeEntityID,
}

func (e FieldType) IsValid() bool {
	switch e {
	case FieldTypeString, FieldTypeInteger, FieldTypeFloat, FieldTypeBoolean, FieldTypeTimestamp, FieldTypeJSON, FieldTypeFileReference, FieldTypeGeometry, FieldTypeTimeseries, FieldTypeEntityReference, FieldTypeEntityReferenceArray, FieldTypeEntityID:
		return true
	}
	return false
}

func (e FieldType) String() string {
	return string(e)
}

func (e *FieldType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FieldType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FieldType", str)
	}
	return nil
}

func (e FieldType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *FieldType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e FieldType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type JoinSide string

const (
	JoinSideLeft  JoinSide = "LEFT"
	JoinSideRight JoinSide = "RIGHT"
)

var AllJoinSide = []JoinSide{
	JoinSideLeft,
	JoinSideRight,
}

func (e JoinSide) IsValid() bool {
	switch e {
	case JoinSideLeft, JoinSideRight:
		return true
	}
	return false
}

func (e JoinSide) String() string {
	return string(e)
}

func (e *JoinSide) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JoinSide(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JoinSide", str)
	}
	return nil
}

func (e JoinSide) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *JoinSide) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e JoinSide) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type JoinSortDirection string

const (
	JoinSortDirectionAsc  JoinSortDirection = "ASC"
	JoinSortDirectionDesc JoinSortDirection = "DESC"
)

var AllJoinSortDirection = []JoinSortDirection{
	JoinSortDirectionAsc,
	JoinSortDirectionDesc,
}

func (e JoinSortDirection) IsValid() bool {
	switch e {
	case JoinSortDirectionAsc, JoinSortDirectionDesc:
		return true
	}
	return false
}

func (e JoinSortDirection) String() string {
	return string(e)
}

func (e *JoinSortDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JoinSortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JoinSortDirection", str)
	}
	return nil
}

func (e JoinSortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *JoinSortDirection) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e JoinSortDirection) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type JoinType string

const (
	JoinTypeReference JoinType = "REFERENCE"
	JoinTypeCross     JoinType = "CROSS"
)

var AllJoinType = []JoinType{
	JoinTypeReference,
	JoinTypeCross,
}

func (e JoinType) IsValid() bool {
	switch e {
	case JoinTypeReference, JoinTypeCross:
		return true
	}
	return false
}

func (e JoinType) String() string {
	return string(e)
}

func (e *JoinType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JoinType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JoinType", str)
	}
	return nil
}

func (e JoinType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *JoinType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e JoinType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SchemaStatus string

const (
	SchemaStatusActive     SchemaStatus = "ACTIVE"
	SchemaStatusDeprecated SchemaStatus = "DEPRECATED"
	SchemaStatusArchived   SchemaStatus = "ARCHIVED"
	SchemaStatusDraft      SchemaStatus = "DRAFT"
)

var AllSchemaStatus = []SchemaStatus{
	SchemaStatusActive,
	SchemaStatusDeprecated,
	SchemaStatusArchived,
	SchemaStatusDraft,
}

func (e SchemaStatus) IsValid() bool {
	switch e {
	case SchemaStatusActive, SchemaStatusDeprecated, SchemaStatusArchived, SchemaStatusDraft:
		return true
	}
	return false
}

func (e SchemaStatus) String() string {
	return string(e)
}

func (e *SchemaStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SchemaStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SchemaStatus", str)
	}
	return nil
}

func (e SchemaStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SchemaStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SchemaStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
