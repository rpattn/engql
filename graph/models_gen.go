// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type CreateEntityInput struct {
	OrganizationID string  `json:"organizationId"`
	EntityType     string  `json:"entityType"`
	Path           *string `json:"path,omitempty"`
	Properties     string  `json:"properties"`
}

type CreateEntitySchemaInput struct {
	OrganizationID string                  `json:"organizationId"`
	Name           string                  `json:"name"`
	Description    *string                 `json:"description,omitempty"`
	Fields         []*FieldDefinitionInput `json:"fields"`
}

type CreateOrganizationInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
}

type Entity struct {
	ID             string `json:"id"`
	OrganizationID string `json:"organizationId"`
	EntityType     string `json:"entityType"`
	Path           string `json:"path"`
	Properties     string `json:"properties"`
	CreatedAt      string `json:"createdAt"`
	UpdatedAt      string `json:"updatedAt"`
}

type EntityConnection struct {
	Entities []*Entity `json:"entities"`
	PageInfo *PageInfo `json:"pageInfo"`
}

type EntityFilter struct {
	EntityType      *string           `json:"entityType,omitempty"`
	PropertyFilters []*PropertyFilter `json:"propertyFilters,omitempty"`
	TextSearch      *string           `json:"textSearch,omitempty"`
	PathFilter      *PathFilter       `json:"pathFilter,omitempty"`
}

type EntityHierarchy struct {
	Current   *Entity   `json:"current"`
	Ancestors []*Entity `json:"ancestors"`
	Children  []*Entity `json:"children"`
	Siblings  []*Entity `json:"siblings"`
}

type EntitySchema struct {
	ID             string             `json:"id"`
	OrganizationID string             `json:"organizationId"`
	Name           string             `json:"name"`
	Description    *string            `json:"description,omitempty"`
	Fields         []*FieldDefinition `json:"fields"`
	CreatedAt      string             `json:"createdAt"`
	UpdatedAt      string             `json:"updatedAt"`
}

type FieldDefinition struct {
	Type        FieldType `json:"type"`
	Required    bool      `json:"required"`
	Description *string   `json:"description,omitempty"`
	Default     *string   `json:"default,omitempty"`
	Validation  *string   `json:"validation,omitempty"`
}

type FieldDefinitionInput struct {
	Name        string    `json:"name"`
	Type        FieldType `json:"type"`
	Required    *bool     `json:"required,omitempty"`
	Description *string   `json:"description,omitempty"`
	Default     *string   `json:"default,omitempty"`
	Validation  *string   `json:"validation,omitempty"`
}

type Mutation struct {
}

type Organization struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	CreatedAt   string  `json:"createdAt"`
	UpdatedAt   string  `json:"updatedAt"`
}

type PageInfo struct {
	HasNextPage     bool `json:"hasNextPage"`
	HasPreviousPage bool `json:"hasPreviousPage"`
	TotalCount      int  `json:"totalCount"`
}

type PaginationInput struct {
	Limit  *int `json:"limit,omitempty"`
	Offset *int `json:"offset,omitempty"`
}

type PathFilter struct {
	AncestorsOf   *string `json:"ancestorsOf,omitempty"`
	DescendantsOf *string `json:"descendantsOf,omitempty"`
	ChildrenOf    *string `json:"childrenOf,omitempty"`
	SiblingsOf    *string `json:"siblingsOf,omitempty"`
}

type PropertyFilter struct {
	Key     string   `json:"key"`
	Value   *string  `json:"value,omitempty"`
	Exists  *bool    `json:"exists,omitempty"`
	InArray []string `json:"inArray,omitempty"`
}

type Query struct {
}

type UpdateEntityInput struct {
	ID         string  `json:"id"`
	EntityType *string `json:"entityType,omitempty"`
	Path       *string `json:"path,omitempty"`
	Properties *string `json:"properties,omitempty"`
}

type UpdateEntitySchemaInput struct {
	ID          string                  `json:"id"`
	Name        *string                 `json:"name,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Fields      []*FieldDefinitionInput `json:"fields,omitempty"`
}

type UpdateOrganizationInput struct {
	ID          string  `json:"id"`
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type ValidationResult struct {
	IsValid  bool     `json:"isValid"`
	Errors   []string `json:"errors"`
	Warnings []string `json:"warnings"`
}

type FieldType string

const (
	FieldTypeString        FieldType = "STRING"
	FieldTypeInteger       FieldType = "INTEGER"
	FieldTypeFloat         FieldType = "FLOAT"
	FieldTypeBoolean       FieldType = "BOOLEAN"
	FieldTypeTimestamp     FieldType = "TIMESTAMP"
	FieldTypeJSON          FieldType = "JSON"
	FieldTypeFileReference FieldType = "FILE_REFERENCE"
	FieldTypeGeometry      FieldType = "GEOMETRY"
	FieldTypeTimeseries    FieldType = "TIMESERIES"
)

var AllFieldType = []FieldType{
	FieldTypeString,
	FieldTypeInteger,
	FieldTypeFloat,
	FieldTypeBoolean,
	FieldTypeTimestamp,
	FieldTypeJSON,
	FieldTypeFileReference,
	FieldTypeGeometry,
	FieldTypeTimeseries,
}

func (e FieldType) IsValid() bool {
	switch e {
	case FieldTypeString, FieldTypeInteger, FieldTypeFloat, FieldTypeBoolean, FieldTypeTimestamp, FieldTypeJSON, FieldTypeFileReference, FieldTypeGeometry, FieldTypeTimeseries:
		return true
	}
	return false
}

func (e FieldType) String() string {
	return string(e)
}

func (e *FieldType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FieldType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FieldType", str)
	}
	return nil
}

func (e FieldType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *FieldType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e FieldType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
