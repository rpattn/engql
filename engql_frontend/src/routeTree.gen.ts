/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TransformationsRouteImport } from './routes/transformations'
import { Route as JoinTestingRouteImport } from './routes/join-testing'
import { Route as IngestionRouteImport } from './routes/ingestion'
import { Route as EntitySchemasRouteImport } from './routes/entity-schemas'
import { Route as EntitiesRouteImport } from './routes/entities'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TransformationsIndexRouteImport } from './routes/transformations/index'
import { Route as EntitiesIndexRouteImport } from './routes/entities.index'
import { Route as TransformationsTransformationIdRouteImport } from './routes/transformations/$transformationId'
import { Route as IngestionBatchesRouteImport } from './routes/ingestion/batches'
import { Route as EntityEntityIdRouteImport } from './routes/entity/$entityId'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo/tanstack-query'
import { Route as DemoTableRouteImport } from './routes/demo/table'
import { Route as TransformationsTransformationIdIndexRouteImport } from './routes/transformations/$transformationId/index'
import { Route as TransformationsTransformationIdResultsRouteImport } from './routes/transformations/$transformationId/results'
import { Route as TransformationsTransformationIdExecuteRouteImport } from './routes/transformations/$transformationId/execute'
import { Route as EntitiesEntityIdVersionsRouteImport } from './routes/entities/$entityId/versions'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo/start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo/start.api-request'
import { Route as DemoFormSimpleRouteImport } from './routes/demo/form.simple'
import { Route as DemoFormAddressRouteImport } from './routes/demo/form.address'
import { Route as DemoApiTqTodosRouteImport } from './routes/demo/api.tq-todos'
import { Route as DemoApiNamesRouteImport } from './routes/demo/api.names'
import { Route as DemoStartSsrIndexRouteImport } from './routes/demo/start.ssr.index'
import { Route as DemoStartSsrSpaModeRouteImport } from './routes/demo/start.ssr.spa-mode'
import { Route as DemoStartSsrFullSsrRouteImport } from './routes/demo/start.ssr.full-ssr'
import { Route as DemoStartSsrDataOnlyRouteImport } from './routes/demo/start.ssr.data-only'

const TransformationsRoute = TransformationsRouteImport.update({
  id: '/transformations',
  path: '/transformations',
  getParentRoute: () => rootRouteImport,
} as any)
const JoinTestingRoute = JoinTestingRouteImport.update({
  id: '/join-testing',
  path: '/join-testing',
  getParentRoute: () => rootRouteImport,
} as any)
const IngestionRoute = IngestionRouteImport.update({
  id: '/ingestion',
  path: '/ingestion',
  getParentRoute: () => rootRouteImport,
} as any)
const EntitySchemasRoute = EntitySchemasRouteImport.update({
  id: '/entity-schemas',
  path: '/entity-schemas',
  getParentRoute: () => rootRouteImport,
} as any)
const EntitiesRoute = EntitiesRouteImport.update({
  id: '/entities',
  path: '/entities',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TransformationsIndexRoute = TransformationsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TransformationsRoute,
} as any)
const EntitiesIndexRoute = EntitiesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EntitiesRoute,
} as any)
const TransformationsTransformationIdRoute =
  TransformationsTransformationIdRouteImport.update({
    id: '/$transformationId',
    path: '/$transformationId',
    getParentRoute: () => TransformationsRoute,
  } as any)
const IngestionBatchesRoute = IngestionBatchesRouteImport.update({
  id: '/batches',
  path: '/batches',
  getParentRoute: () => IngestionRoute,
} as any)
const EntityEntityIdRoute = EntityEntityIdRouteImport.update({
  id: '/entity/$entityId',
  path: '/entity/$entityId',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTableRoute = DemoTableRouteImport.update({
  id: '/demo/table',
  path: '/demo/table',
  getParentRoute: () => rootRouteImport,
} as any)
const TransformationsTransformationIdIndexRoute =
  TransformationsTransformationIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => TransformationsTransformationIdRoute,
  } as any)
const TransformationsTransformationIdResultsRoute =
  TransformationsTransformationIdResultsRouteImport.update({
    id: '/results',
    path: '/results',
    getParentRoute: () => TransformationsTransformationIdRoute,
  } as any)
const TransformationsTransformationIdExecuteRoute =
  TransformationsTransformationIdExecuteRouteImport.update({
    id: '/execute',
    path: '/execute',
    getParentRoute: () => TransformationsTransformationIdRoute,
  } as any)
const EntitiesEntityIdVersionsRoute =
  EntitiesEntityIdVersionsRouteImport.update({
    id: '/$entityId/versions',
    path: '/$entityId/versions',
    getParentRoute: () => EntitiesRoute,
  } as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormSimpleRoute = DemoFormSimpleRouteImport.update({
  id: '/demo/form/simple',
  path: '/demo/form/simple',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormAddressRoute = DemoFormAddressRouteImport.update({
  id: '/demo/form/address',
  path: '/demo/form/address',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoApiTqTodosRoute = DemoApiTqTodosRouteImport.update({
  id: '/demo/api/tq-todos',
  path: '/demo/api/tq-todos',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoApiNamesRoute = DemoApiNamesRouteImport.update({
  id: '/demo/api/names',
  path: '/demo/api/names',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrIndexRoute = DemoStartSsrIndexRouteImport.update({
  id: '/demo/start/ssr/',
  path: '/demo/start/ssr/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrSpaModeRoute = DemoStartSsrSpaModeRouteImport.update({
  id: '/demo/start/ssr/spa-mode',
  path: '/demo/start/ssr/spa-mode',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrFullSsrRoute = DemoStartSsrFullSsrRouteImport.update({
  id: '/demo/start/ssr/full-ssr',
  path: '/demo/start/ssr/full-ssr',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrDataOnlyRoute = DemoStartSsrDataOnlyRouteImport.update({
  id: '/demo/start/ssr/data-only',
  path: '/demo/start/ssr/data-only',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/entities': typeof EntitiesRouteWithChildren
  '/entity-schemas': typeof EntitySchemasRoute
  '/ingestion': typeof IngestionRouteWithChildren
  '/join-testing': typeof JoinTestingRoute
  '/transformations': typeof TransformationsRouteWithChildren
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/entity/$entityId': typeof EntityEntityIdRoute
  '/ingestion/batches': typeof IngestionBatchesRoute
  '/transformations/$transformationId': typeof TransformationsTransformationIdRouteWithChildren
  '/entities/': typeof EntitiesIndexRoute
  '/transformations/': typeof TransformationsIndexRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/entities/$entityId/versions': typeof EntitiesEntityIdVersionsRoute
  '/transformations/$transformationId/execute': typeof TransformationsTransformationIdExecuteRoute
  '/transformations/$transformationId/results': typeof TransformationsTransformationIdResultsRoute
  '/transformations/$transformationId/': typeof TransformationsTransformationIdIndexRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr': typeof DemoStartSsrIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/entity-schemas': typeof EntitySchemasRoute
  '/ingestion': typeof IngestionRouteWithChildren
  '/join-testing': typeof JoinTestingRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/entity/$entityId': typeof EntityEntityIdRoute
  '/ingestion/batches': typeof IngestionBatchesRoute
  '/entities': typeof EntitiesIndexRoute
  '/transformations': typeof TransformationsIndexRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/entities/$entityId/versions': typeof EntitiesEntityIdVersionsRoute
  '/transformations/$transformationId/execute': typeof TransformationsTransformationIdExecuteRoute
  '/transformations/$transformationId/results': typeof TransformationsTransformationIdResultsRoute
  '/transformations/$transformationId': typeof TransformationsTransformationIdIndexRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr': typeof DemoStartSsrIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/entities': typeof EntitiesRouteWithChildren
  '/entity-schemas': typeof EntitySchemasRoute
  '/ingestion': typeof IngestionRouteWithChildren
  '/join-testing': typeof JoinTestingRoute
  '/transformations': typeof TransformationsRouteWithChildren
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/entity/$entityId': typeof EntityEntityIdRoute
  '/ingestion/batches': typeof IngestionBatchesRoute
  '/transformations/$transformationId': typeof TransformationsTransformationIdRouteWithChildren
  '/entities/': typeof EntitiesIndexRoute
  '/transformations/': typeof TransformationsIndexRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/entities/$entityId/versions': typeof EntitiesEntityIdVersionsRoute
  '/transformations/$transformationId/execute': typeof TransformationsTransformationIdExecuteRoute
  '/transformations/$transformationId/results': typeof TransformationsTransformationIdResultsRoute
  '/transformations/$transformationId/': typeof TransformationsTransformationIdIndexRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr/': typeof DemoStartSsrIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/entities'
    | '/entity-schemas'
    | '/ingestion'
    | '/join-testing'
    | '/transformations'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/entity/$entityId'
    | '/ingestion/batches'
    | '/transformations/$transformationId'
    | '/entities/'
    | '/transformations/'
    | '/demo/api/names'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/entities/$entityId/versions'
    | '/transformations/$transformationId/execute'
    | '/transformations/$transformationId/results'
    | '/transformations/$transformationId/'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/entity-schemas'
    | '/ingestion'
    | '/join-testing'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/entity/$entityId'
    | '/ingestion/batches'
    | '/entities'
    | '/transformations'
    | '/demo/api/names'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/entities/$entityId/versions'
    | '/transformations/$transformationId/execute'
    | '/transformations/$transformationId/results'
    | '/transformations/$transformationId'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr'
  id:
    | '__root__'
    | '/'
    | '/entities'
    | '/entity-schemas'
    | '/ingestion'
    | '/join-testing'
    | '/transformations'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/entity/$entityId'
    | '/ingestion/batches'
    | '/transformations/$transformationId'
    | '/entities/'
    | '/transformations/'
    | '/demo/api/names'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/entities/$entityId/versions'
    | '/transformations/$transformationId/execute'
    | '/transformations/$transformationId/results'
    | '/transformations/$transformationId/'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EntitiesRoute: typeof EntitiesRouteWithChildren
  EntitySchemasRoute: typeof EntitySchemasRoute
  IngestionRoute: typeof IngestionRouteWithChildren
  JoinTestingRoute: typeof JoinTestingRoute
  TransformationsRoute: typeof TransformationsRouteWithChildren
  DemoTableRoute: typeof DemoTableRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  EntityEntityIdRoute: typeof EntityEntityIdRoute
  DemoApiNamesRoute: typeof DemoApiNamesRoute
  DemoApiTqTodosRoute: typeof DemoApiTqTodosRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
  DemoStartSsrDataOnlyRoute: typeof DemoStartSsrDataOnlyRoute
  DemoStartSsrFullSsrRoute: typeof DemoStartSsrFullSsrRoute
  DemoStartSsrSpaModeRoute: typeof DemoStartSsrSpaModeRoute
  DemoStartSsrIndexRoute: typeof DemoStartSsrIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/transformations': {
      id: '/transformations'
      path: '/transformations'
      fullPath: '/transformations'
      preLoaderRoute: typeof TransformationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/join-testing': {
      id: '/join-testing'
      path: '/join-testing'
      fullPath: '/join-testing'
      preLoaderRoute: typeof JoinTestingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ingestion': {
      id: '/ingestion'
      path: '/ingestion'
      fullPath: '/ingestion'
      preLoaderRoute: typeof IngestionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/entity-schemas': {
      id: '/entity-schemas'
      path: '/entity-schemas'
      fullPath: '/entity-schemas'
      preLoaderRoute: typeof EntitySchemasRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/entities': {
      id: '/entities'
      path: '/entities'
      fullPath: '/entities'
      preLoaderRoute: typeof EntitiesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/transformations/': {
      id: '/transformations/'
      path: '/'
      fullPath: '/transformations/'
      preLoaderRoute: typeof TransformationsIndexRouteImport
      parentRoute: typeof TransformationsRoute
    }
    '/entities/': {
      id: '/entities/'
      path: '/'
      fullPath: '/entities/'
      preLoaderRoute: typeof EntitiesIndexRouteImport
      parentRoute: typeof EntitiesRoute
    }
    '/transformations/$transformationId': {
      id: '/transformations/$transformationId'
      path: '/$transformationId'
      fullPath: '/transformations/$transformationId'
      preLoaderRoute: typeof TransformationsTransformationIdRouteImport
      parentRoute: typeof TransformationsRoute
    }
    '/ingestion/batches': {
      id: '/ingestion/batches'
      path: '/batches'
      fullPath: '/ingestion/batches'
      preLoaderRoute: typeof IngestionBatchesRouteImport
      parentRoute: typeof IngestionRoute
    }
    '/entity/$entityId': {
      id: '/entity/$entityId'
      path: '/entity/$entityId'
      fullPath: '/entity/$entityId'
      preLoaderRoute: typeof EntityEntityIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/table': {
      id: '/demo/table'
      path: '/demo/table'
      fullPath: '/demo/table'
      preLoaderRoute: typeof DemoTableRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/transformations/$transformationId/': {
      id: '/transformations/$transformationId/'
      path: '/'
      fullPath: '/transformations/$transformationId/'
      preLoaderRoute: typeof TransformationsTransformationIdIndexRouteImport
      parentRoute: typeof TransformationsTransformationIdRoute
    }
    '/transformations/$transformationId/results': {
      id: '/transformations/$transformationId/results'
      path: '/results'
      fullPath: '/transformations/$transformationId/results'
      preLoaderRoute: typeof TransformationsTransformationIdResultsRouteImport
      parentRoute: typeof TransformationsTransformationIdRoute
    }
    '/transformations/$transformationId/execute': {
      id: '/transformations/$transformationId/execute'
      path: '/execute'
      fullPath: '/transformations/$transformationId/execute'
      preLoaderRoute: typeof TransformationsTransformationIdExecuteRouteImport
      parentRoute: typeof TransformationsTransformationIdRoute
    }
    '/entities/$entityId/versions': {
      id: '/entities/$entityId/versions'
      path: '/$entityId/versions'
      fullPath: '/entities/$entityId/versions'
      preLoaderRoute: typeof EntitiesEntityIdVersionsRouteImport
      parentRoute: typeof EntitiesRoute
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/demo/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/demo/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/api/tq-todos': {
      id: '/demo/api/tq-todos'
      path: '/demo/api/tq-todos'
      fullPath: '/demo/api/tq-todos'
      preLoaderRoute: typeof DemoApiTqTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/api/names': {
      id: '/demo/api/names'
      path: '/demo/api/names'
      fullPath: '/demo/api/names'
      preLoaderRoute: typeof DemoApiNamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/': {
      id: '/demo/start/ssr/'
      path: '/demo/start/ssr'
      fullPath: '/demo/start/ssr'
      preLoaderRoute: typeof DemoStartSsrIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/spa-mode': {
      id: '/demo/start/ssr/spa-mode'
      path: '/demo/start/ssr/spa-mode'
      fullPath: '/demo/start/ssr/spa-mode'
      preLoaderRoute: typeof DemoStartSsrSpaModeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/full-ssr': {
      id: '/demo/start/ssr/full-ssr'
      path: '/demo/start/ssr/full-ssr'
      fullPath: '/demo/start/ssr/full-ssr'
      preLoaderRoute: typeof DemoStartSsrFullSsrRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/data-only': {
      id: '/demo/start/ssr/data-only'
      path: '/demo/start/ssr/data-only'
      fullPath: '/demo/start/ssr/data-only'
      preLoaderRoute: typeof DemoStartSsrDataOnlyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface EntitiesRouteChildren {
  EntitiesIndexRoute: typeof EntitiesIndexRoute
  EntitiesEntityIdVersionsRoute: typeof EntitiesEntityIdVersionsRoute
}

const EntitiesRouteChildren: EntitiesRouteChildren = {
  EntitiesIndexRoute: EntitiesIndexRoute,
  EntitiesEntityIdVersionsRoute: EntitiesEntityIdVersionsRoute,
}

const EntitiesRouteWithChildren = EntitiesRoute._addFileChildren(
  EntitiesRouteChildren,
)

interface IngestionRouteChildren {
  IngestionBatchesRoute: typeof IngestionBatchesRoute
}

const IngestionRouteChildren: IngestionRouteChildren = {
  IngestionBatchesRoute: IngestionBatchesRoute,
}

const IngestionRouteWithChildren = IngestionRoute._addFileChildren(
  IngestionRouteChildren,
)

interface TransformationsTransformationIdRouteChildren {
  TransformationsTransformationIdExecuteRoute: typeof TransformationsTransformationIdExecuteRoute
  TransformationsTransformationIdResultsRoute: typeof TransformationsTransformationIdResultsRoute
  TransformationsTransformationIdIndexRoute: typeof TransformationsTransformationIdIndexRoute
}

const TransformationsTransformationIdRouteChildren: TransformationsTransformationIdRouteChildren =
  {
    TransformationsTransformationIdExecuteRoute:
      TransformationsTransformationIdExecuteRoute,
    TransformationsTransformationIdResultsRoute:
      TransformationsTransformationIdResultsRoute,
    TransformationsTransformationIdIndexRoute:
      TransformationsTransformationIdIndexRoute,
  }

const TransformationsTransformationIdRouteWithChildren =
  TransformationsTransformationIdRoute._addFileChildren(
    TransformationsTransformationIdRouteChildren,
  )

interface TransformationsRouteChildren {
  TransformationsTransformationIdRoute: typeof TransformationsTransformationIdRouteWithChildren
  TransformationsIndexRoute: typeof TransformationsIndexRoute
}

const TransformationsRouteChildren: TransformationsRouteChildren = {
  TransformationsTransformationIdRoute:
    TransformationsTransformationIdRouteWithChildren,
  TransformationsIndexRoute: TransformationsIndexRoute,
}

const TransformationsRouteWithChildren = TransformationsRoute._addFileChildren(
  TransformationsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EntitiesRoute: EntitiesRouteWithChildren,
  EntitySchemasRoute: EntitySchemasRoute,
  IngestionRoute: IngestionRouteWithChildren,
  JoinTestingRoute: JoinTestingRoute,
  TransformationsRoute: TransformationsRouteWithChildren,
  DemoTableRoute: DemoTableRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  EntityEntityIdRoute: EntityEntityIdRoute,
  DemoApiNamesRoute: DemoApiNamesRoute,
  DemoApiTqTodosRoute: DemoApiTqTodosRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
  DemoStartSsrDataOnlyRoute: DemoStartSsrDataOnlyRoute,
  DemoStartSsrFullSsrRoute: DemoStartSsrFullSsrRoute,
  DemoStartSsrSpaModeRoute: DemoStartSsrSpaModeRoute,
  DemoStartSsrIndexRoute: DemoStartSsrIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
