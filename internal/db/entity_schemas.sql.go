// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: entity_schemas.sql

package db

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateEntitySchema = `-- name: CreateEntitySchema :one
INSERT INTO entity_schemas (
    organization_id,
    name,
    description,
    fields,
    version,
    previous_version_id,
    status
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, organization_id, name, description, fields, version, previous_version_id, status, created_at, updated_at
`

type CreateEntitySchemaParams struct {
	OrganizationID    uuid.UUID       `json:"organization_id"`
	Name              string          `json:"name"`
	Description       pgtype.Text     `json:"description"`
	Fields            json.RawMessage `json:"fields"`
	Version           string          `json:"version"`
	PreviousVersionID pgtype.UUID     `json:"previous_version_id"`
	Status            string          `json:"status"`
}

type CreateEntitySchemaRow struct {
	ID                uuid.UUID       `json:"id"`
	OrganizationID    uuid.UUID       `json:"organization_id"`
	Name              string          `json:"name"`
	Description       pgtype.Text     `json:"description"`
	Fields            json.RawMessage `json:"fields"`
	Version           string          `json:"version"`
	PreviousVersionID pgtype.UUID     `json:"previous_version_id"`
	Status            string          `json:"status"`
	CreatedAt         time.Time       `json:"created_at"`
	UpdatedAt         time.Time       `json:"updated_at"`
}

func (q *Queries) CreateEntitySchema(ctx context.Context, arg CreateEntitySchemaParams) (CreateEntitySchemaRow, error) {
	row := q.db.QueryRow(ctx, CreateEntitySchema,
		arg.OrganizationID,
		arg.Name,
		arg.Description,
		arg.Fields,
		arg.Version,
		arg.PreviousVersionID,
		arg.Status,
	)
	var i CreateEntitySchemaRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.Fields,
		&i.Version,
		&i.PreviousVersionID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetEntitySchema = `-- name: GetEntitySchema :one
SELECT id, organization_id, name, description, fields, version, previous_version_id, status, created_at, updated_at
FROM entity_schemas
WHERE id = $1
`

type GetEntitySchemaRow struct {
	ID                uuid.UUID       `json:"id"`
	OrganizationID    uuid.UUID       `json:"organization_id"`
	Name              string          `json:"name"`
	Description       pgtype.Text     `json:"description"`
	Fields            json.RawMessage `json:"fields"`
	Version           string          `json:"version"`
	PreviousVersionID pgtype.UUID     `json:"previous_version_id"`
	Status            string          `json:"status"`
	CreatedAt         time.Time       `json:"created_at"`
	UpdatedAt         time.Time       `json:"updated_at"`
}

func (q *Queries) GetEntitySchema(ctx context.Context, id uuid.UUID) (GetEntitySchemaRow, error) {
	row := q.db.QueryRow(ctx, GetEntitySchema, id)
	var i GetEntitySchemaRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.Fields,
		&i.Version,
		&i.PreviousVersionID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetEntitySchemaByName = `-- name: GetEntitySchemaByName :one
SELECT id, organization_id, name, description, fields, version, previous_version_id, status, created_at, updated_at
FROM entity_schemas
WHERE organization_id = $1 AND name = $2 AND status <> 'ARCHIVED'
ORDER BY created_at DESC
LIMIT 1
`

type GetEntitySchemaByNameParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Name           string    `json:"name"`
}

type GetEntitySchemaByNameRow struct {
	ID                uuid.UUID       `json:"id"`
	OrganizationID    uuid.UUID       `json:"organization_id"`
	Name              string          `json:"name"`
	Description       pgtype.Text     `json:"description"`
	Fields            json.RawMessage `json:"fields"`
	Version           string          `json:"version"`
	PreviousVersionID pgtype.UUID     `json:"previous_version_id"`
	Status            string          `json:"status"`
	CreatedAt         time.Time       `json:"created_at"`
	UpdatedAt         time.Time       `json:"updated_at"`
}

func (q *Queries) GetEntitySchemaByName(ctx context.Context, arg GetEntitySchemaByNameParams) (GetEntitySchemaByNameRow, error) {
	row := q.db.QueryRow(ctx, GetEntitySchemaByName, arg.OrganizationID, arg.Name)
	var i GetEntitySchemaByNameRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.Fields,
		&i.Version,
		&i.PreviousVersionID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetEntitySchemaVersionByNumber = `-- name: GetEntitySchemaVersionByNumber :one
SELECT id, organization_id, name, description, fields, version, previous_version_id, status, created_at, updated_at
FROM entity_schemas
WHERE organization_id = $1 AND name = $2 AND version = $3
ORDER BY created_at DESC
LIMIT 1
`

type GetEntitySchemaVersionByNumberParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Name           string    `json:"name"`
	Version        string    `json:"version"`
}

type GetEntitySchemaVersionByNumberRow struct {
	ID                uuid.UUID       `json:"id"`
	OrganizationID    uuid.UUID       `json:"organization_id"`
	Name              string          `json:"name"`
	Description       pgtype.Text     `json:"description"`
	Fields            json.RawMessage `json:"fields"`
	Version           string          `json:"version"`
	PreviousVersionID pgtype.UUID     `json:"previous_version_id"`
	Status            string          `json:"status"`
	CreatedAt         time.Time       `json:"created_at"`
	UpdatedAt         time.Time       `json:"updated_at"`
}

func (q *Queries) GetEntitySchemaVersionByNumber(ctx context.Context, arg GetEntitySchemaVersionByNumberParams) (GetEntitySchemaVersionByNumberRow, error) {
	row := q.db.QueryRow(ctx, GetEntitySchemaVersionByNumber, arg.OrganizationID, arg.Name, arg.Version)
	var i GetEntitySchemaVersionByNumberRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.Fields,
		&i.Version,
		&i.PreviousVersionID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListEntitySchemaVersions = `-- name: ListEntitySchemaVersions :many
SELECT id, organization_id, name, description, fields, version, previous_version_id, status, created_at, updated_at
FROM entity_schemas
WHERE organization_id = $1 AND name = $2
ORDER BY created_at DESC
`

type ListEntitySchemaVersionsParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Name           string    `json:"name"`
}

type ListEntitySchemaVersionsRow struct {
	ID                uuid.UUID       `json:"id"`
	OrganizationID    uuid.UUID       `json:"organization_id"`
	Name              string          `json:"name"`
	Description       pgtype.Text     `json:"description"`
	Fields            json.RawMessage `json:"fields"`
	Version           string          `json:"version"`
	PreviousVersionID pgtype.UUID     `json:"previous_version_id"`
	Status            string          `json:"status"`
	CreatedAt         time.Time       `json:"created_at"`
	UpdatedAt         time.Time       `json:"updated_at"`
}

func (q *Queries) ListEntitySchemaVersions(ctx context.Context, arg ListEntitySchemaVersionsParams) ([]ListEntitySchemaVersionsRow, error) {
	rows, err := q.db.Query(ctx, ListEntitySchemaVersions, arg.OrganizationID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEntitySchemaVersionsRow{}
	for rows.Next() {
		var i ListEntitySchemaVersionsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.Description,
			&i.Fields,
			&i.Version,
			&i.PreviousVersionID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListEntitySchemas = `-- name: ListEntitySchemas :many
SELECT DISTINCT ON (organization_id, name)
    id,
    organization_id,
    name,
    description,
    fields,
    version,
    previous_version_id,
    status,
    created_at,
    updated_at
FROM entity_schemas
WHERE organization_id = $1 AND status <> 'ARCHIVED'
ORDER BY organization_id, name, created_at DESC
`

type ListEntitySchemasRow struct {
	ID                uuid.UUID       `json:"id"`
	OrganizationID    uuid.UUID       `json:"organization_id"`
	Name              string          `json:"name"`
	Description       pgtype.Text     `json:"description"`
	Fields            json.RawMessage `json:"fields"`
	Version           string          `json:"version"`
	PreviousVersionID pgtype.UUID     `json:"previous_version_id"`
	Status            string          `json:"status"`
	CreatedAt         time.Time       `json:"created_at"`
	UpdatedAt         time.Time       `json:"updated_at"`
}

func (q *Queries) ListEntitySchemas(ctx context.Context, organizationID uuid.UUID) ([]ListEntitySchemasRow, error) {
	rows, err := q.db.Query(ctx, ListEntitySchemas, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEntitySchemasRow{}
	for rows.Next() {
		var i ListEntitySchemasRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.Description,
			&i.Fields,
			&i.Version,
			&i.PreviousVersionID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SchemaExists = `-- name: SchemaExists :one
SELECT EXISTS(
    SELECT 1 FROM entity_schemas
    WHERE organization_id = $1 AND name = $2
)
`

type SchemaExistsParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Name           string    `json:"name"`
}

func (q *Queries) SchemaExists(ctx context.Context, arg SchemaExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, SchemaExists, arg.OrganizationID, arg.Name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
