// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: entity_schemas.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateEntitySchema = `-- name: CreateEntitySchema :one
INSERT INTO entity_schemas (organization_id, name, description, fields)
VALUES ($1, $2, $3, $4)
RETURNING id, organization_id, name, description, fields, created_at, updated_at
`

type CreateEntitySchemaParams struct {
	OrganizationID uuid.UUID       `json:"organization_id"`
	Name           string          `json:"name"`
	Description    pgtype.Text     `json:"description"`
	Fields         json.RawMessage `json:"fields"`
}

func (q *Queries) CreateEntitySchema(ctx context.Context, arg CreateEntitySchemaParams) (EntitySchema, error) {
	row := q.db.QueryRow(ctx, CreateEntitySchema,
		arg.OrganizationID,
		arg.Name,
		arg.Description,
		arg.Fields,
	)
	var i EntitySchema
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.Fields,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteEntitySchema = `-- name: DeleteEntitySchema :exec
DELETE FROM entity_schemas
WHERE id = $1
`

func (q *Queries) DeleteEntitySchema(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteEntitySchema, id)
	return err
}

const GetEntitySchema = `-- name: GetEntitySchema :one
SELECT id, organization_id, name, description, fields, created_at, updated_at
FROM entity_schemas
WHERE id = $1
`

func (q *Queries) GetEntitySchema(ctx context.Context, id uuid.UUID) (EntitySchema, error) {
	row := q.db.QueryRow(ctx, GetEntitySchema, id)
	var i EntitySchema
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.Fields,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetEntitySchemaByName = `-- name: GetEntitySchemaByName :one
SELECT id, organization_id, name, description, fields, created_at, updated_at
FROM entity_schemas
WHERE organization_id = $1 AND name = $2
`

type GetEntitySchemaByNameParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Name           string    `json:"name"`
}

func (q *Queries) GetEntitySchemaByName(ctx context.Context, arg GetEntitySchemaByNameParams) (EntitySchema, error) {
	row := q.db.QueryRow(ctx, GetEntitySchemaByName, arg.OrganizationID, arg.Name)
	var i EntitySchema
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.Fields,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListEntitySchemas = `-- name: ListEntitySchemas :many
SELECT id, organization_id, name, description, fields, created_at, updated_at
FROM entity_schemas
WHERE organization_id = $1
ORDER BY name
`

func (q *Queries) ListEntitySchemas(ctx context.Context, organizationID uuid.UUID) ([]EntitySchema, error) {
	rows, err := q.db.Query(ctx, ListEntitySchemas, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EntitySchema{}
	for rows.Next() {
		var i EntitySchema
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.Description,
			&i.Fields,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SchemaExists = `-- name: SchemaExists :one
SELECT EXISTS(
    SELECT 1 FROM entity_schemas
    WHERE organization_id = $1 AND name = $2
)
`

type SchemaExistsParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Name           string    `json:"name"`
}

func (q *Queries) SchemaExists(ctx context.Context, arg SchemaExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, SchemaExists, arg.OrganizationID, arg.Name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const UpdateEntitySchema = `-- name: UpdateEntitySchema :one
UPDATE entity_schemas
SET name = $2, description = $3, fields = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, organization_id, name, description, fields, created_at, updated_at
`

type UpdateEntitySchemaParams struct {
	ID          uuid.UUID       `json:"id"`
	Name        string          `json:"name"`
	Description pgtype.Text     `json:"description"`
	Fields      json.RawMessage `json:"fields"`
}

func (q *Queries) UpdateEntitySchema(ctx context.Context, arg UpdateEntitySchemaParams) (EntitySchema, error) {
	row := q.db.QueryRow(ctx, UpdateEntitySchema,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Fields,
	)
	var i EntitySchema
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.Fields,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
