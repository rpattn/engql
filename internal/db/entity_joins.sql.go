// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: entity_joins.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateEntityJoin = `-- name: CreateEntityJoin :one
INSERT INTO entity_joins (
    organization_id,
    name,
    description,
    left_entity_type,
    right_entity_type,
    join_field,
    join_field_type,
    left_filters,
    right_filters,
    sort_criteria
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING
    id,
    organization_id,
    name,
    description,
    left_entity_type,
    right_entity_type,
    join_field,
    join_field_type,
    left_filters,
    right_filters,
    sort_criteria,
    created_at,
    updated_at
`

type CreateEntityJoinParams struct {
	OrganizationID  uuid.UUID   `json:"organization_id"`
	Name            string      `json:"name"`
	Description     pgtype.Text `json:"description"`
	LeftEntityType  string      `json:"left_entity_type"`
	RightEntityType string      `json:"right_entity_type"`
	JoinField       string      `json:"join_field"`
	JoinFieldType   string      `json:"join_field_type"`
	LeftFilters     []byte      `json:"left_filters"`
	RightFilters    []byte      `json:"right_filters"`
	SortCriteria    []byte      `json:"sort_criteria"`
}

func (q *Queries) CreateEntityJoin(ctx context.Context, arg CreateEntityJoinParams) (EntityJoin, error) {
	row := q.db.QueryRow(ctx, CreateEntityJoin,
		arg.OrganizationID,
		arg.Name,
		arg.Description,
		arg.LeftEntityType,
		arg.RightEntityType,
		arg.JoinField,
		arg.JoinFieldType,
		arg.LeftFilters,
		arg.RightFilters,
		arg.SortCriteria,
	)
	var i EntityJoin
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.LeftEntityType,
		&i.RightEntityType,
		&i.JoinField,
		&i.JoinFieldType,
		&i.LeftFilters,
		&i.RightFilters,
		&i.SortCriteria,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteEntityJoin = `-- name: DeleteEntityJoin :exec
DELETE FROM entity_joins
WHERE id = $1
`

func (q *Queries) DeleteEntityJoin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteEntityJoin, id)
	return err
}

const GetEntityJoin = `-- name: GetEntityJoin :one
SELECT
    id,
    organization_id,
    name,
    description,
    left_entity_type,
    right_entity_type,
    join_field,
    join_field_type,
    left_filters,
    right_filters,
    sort_criteria,
    created_at,
    updated_at
FROM entity_joins
WHERE id = $1
`

func (q *Queries) GetEntityJoin(ctx context.Context, id uuid.UUID) (EntityJoin, error) {
	row := q.db.QueryRow(ctx, GetEntityJoin, id)
	var i EntityJoin
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.LeftEntityType,
		&i.RightEntityType,
		&i.JoinField,
		&i.JoinFieldType,
		&i.LeftFilters,
		&i.RightFilters,
		&i.SortCriteria,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListEntityJoinsByOrganization = `-- name: ListEntityJoinsByOrganization :many
SELECT
    id,
    organization_id,
    name,
    description,
    left_entity_type,
    right_entity_type,
    join_field,
    join_field_type,
    left_filters,
    right_filters,
    sort_criteria,
    created_at,
    updated_at
FROM entity_joins
WHERE organization_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListEntityJoinsByOrganization(ctx context.Context, organizationID uuid.UUID) ([]EntityJoin, error) {
	rows, err := q.db.Query(ctx, ListEntityJoinsByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EntityJoin{}
	for rows.Next() {
		var i EntityJoin
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.Description,
			&i.LeftEntityType,
			&i.RightEntityType,
			&i.JoinField,
			&i.JoinFieldType,
			&i.LeftFilters,
			&i.RightFilters,
			&i.SortCriteria,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateEntityJoin = `-- name: UpdateEntityJoin :one
UPDATE entity_joins
SET
    name = COALESCE($2, name),
    description = COALESCE($3, description),
    left_entity_type = COALESCE($4, left_entity_type),
    right_entity_type = COALESCE($5, right_entity_type),
    join_field = COALESCE($6, join_field),
    join_field_type = COALESCE($7, join_field_type),
    left_filters = COALESCE($8, left_filters),
    right_filters = COALESCE($9, right_filters),
    sort_criteria = COALESCE($10, sort_criteria),
    updated_at = NOW()
WHERE id = $1
RETURNING
    id,
    organization_id,
    name,
    description,
    left_entity_type,
    right_entity_type,
    join_field,
    join_field_type,
    left_filters,
    right_filters,
    sort_criteria,
    created_at,
    updated_at
`

type UpdateEntityJoinParams struct {
	ID              uuid.UUID   `json:"id"`
	Name            string      `json:"name"`
	Description     pgtype.Text `json:"description"`
	LeftEntityType  string      `json:"left_entity_type"`
	RightEntityType string      `json:"right_entity_type"`
	JoinField       string      `json:"join_field"`
	JoinFieldType   string      `json:"join_field_type"`
	LeftFilters     []byte      `json:"left_filters"`
	RightFilters    []byte      `json:"right_filters"`
	SortCriteria    []byte      `json:"sort_criteria"`
}

func (q *Queries) UpdateEntityJoin(ctx context.Context, arg UpdateEntityJoinParams) (EntityJoin, error) {
	row := q.db.QueryRow(ctx, UpdateEntityJoin,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.LeftEntityType,
		arg.RightEntityType,
		arg.JoinField,
		arg.JoinFieldType,
		arg.LeftFilters,
		arg.RightFilters,
		arg.SortCriteria,
	)
	var i EntityJoin
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.LeftEntityType,
		&i.RightEntityType,
		&i.JoinField,
		&i.JoinFieldType,
		&i.LeftFilters,
		&i.RightFilters,
		&i.SortCriteria,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
