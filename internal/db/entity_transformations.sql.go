// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: entity_transformations.sql

package db

import (
        "context"
        "time"

        "github.com/google/uuid"
        "github.com/jackc/pgx/v5/pgtype"
)

const CreateEntityTransformation = `-- name: CreateEntityTransformation :one
INSERT INTO entity_transformations (
    id,
    organization_id,
    name,
    description,
    nodes
)
VALUES ($1, $2, $3, $4, $5)
RETURNING
    id,
    organization_id,
    name,
    description,
    nodes,
    created_at,
    updated_at
`

type CreateEntityTransformationParams struct {
        ID             uuid.UUID   `json:"id"`
        OrganizationID uuid.UUID   `json:"organization_id"`
        Name           string      `json:"name"`
        Description    pgtype.Text `json:"description"`
        Nodes          []byte      `json:"nodes"`
}

type CreateEntityTransformationRow struct {
        ID             uuid.UUID   `json:"id"`
        OrganizationID uuid.UUID   `json:"organization_id"`
        Name           string      `json:"name"`
        Description    pgtype.Text `json:"description"`
        Nodes          []byte      `json:"nodes"`
        CreatedAt      time.Time   `json:"created_at"`
        UpdatedAt      time.Time   `json:"updated_at"`
}

func (q *Queries) CreateEntityTransformation(ctx context.Context, arg CreateEntityTransformationParams) (CreateEntityTransformationRow, error) {
        row := q.db.QueryRow(ctx, CreateEntityTransformation,
                arg.ID,
                arg.OrganizationID,
                arg.Name,
                arg.Description,
                arg.Nodes,
        )
        var i CreateEntityTransformationRow
        err := row.Scan(
                &i.ID,
                &i.OrganizationID,
                &i.Name,
                &i.Description,
                &i.Nodes,
                &i.CreatedAt,
                &i.UpdatedAt,
        )
        return i, err
}

const GetEntityTransformation = `-- name: GetEntityTransformation :one
SELECT
    id,
    organization_id,
    name,
    description,
    nodes,
    created_at,
    updated_at
FROM entity_transformations
WHERE id = $1
`

type GetEntityTransformationRow struct {
        ID             uuid.UUID   `json:"id"`
        OrganizationID uuid.UUID   `json:"organization_id"`
        Name           string      `json:"name"`
        Description    pgtype.Text `json:"description"`
        Nodes          []byte      `json:"nodes"`
        CreatedAt      time.Time   `json:"created_at"`
        UpdatedAt      time.Time   `json:"updated_at"`
}

func (q *Queries) GetEntityTransformation(ctx context.Context, id uuid.UUID) (GetEntityTransformationRow, error) {
        row := q.db.QueryRow(ctx, GetEntityTransformation, id)
        var i GetEntityTransformationRow
        err := row.Scan(
                &i.ID,
                &i.OrganizationID,
                &i.Name,
                &i.Description,
                &i.Nodes,
                &i.CreatedAt,
                &i.UpdatedAt,
        )
        return i, err
}

const ListEntityTransformationsByOrganization = `-- name: ListEntityTransformationsByOrganization :many
SELECT
    id,
    organization_id,
    name,
    description,
    nodes,
    created_at,
    updated_at
FROM entity_transformations
WHERE organization_id = $1
ORDER BY created_at DESC
`

type ListEntityTransformationsByOrganizationRow struct {
        ID             uuid.UUID   `json:"id"`
        OrganizationID uuid.UUID   `json:"organization_id"`
        Name           string      `json:"name"`
        Description    pgtype.Text `json:"description"`
        Nodes          []byte      `json:"nodes"`
        CreatedAt      time.Time   `json:"created_at"`
        UpdatedAt      time.Time   `json:"updated_at"`
}

func (q *Queries) ListEntityTransformationsByOrganization(ctx context.Context, organizationID uuid.UUID) ([]ListEntityTransformationsByOrganizationRow, error) {
        rows, err := q.db.Query(ctx, ListEntityTransformationsByOrganization, organizationID)
        if err != nil {
                return nil, err
        }
        defer rows.Close()
        var items []ListEntityTransformationsByOrganizationRow
        for rows.Next() {
                var i ListEntityTransformationsByOrganizationRow
                if err := rows.Scan(
                        &i.ID,
                        &i.OrganizationID,
                        &i.Name,
                        &i.Description,
                        &i.Nodes,
                        &i.CreatedAt,
                        &i.UpdatedAt,
                ); err != nil {
                        return nil, err
                }
                items = append(items, i)
        }
        if err := rows.Err(); err != nil {
                return nil, err
        }
        return items, nil
}

const UpdateEntityTransformation = `-- name: UpdateEntityTransformation :one
UPDATE entity_transformations
SET
    name = COALESCE($2, name),
    description = COALESCE($3, description),
    nodes = COALESCE($4, nodes),
    updated_at = NOW()
WHERE id = $1
RETURNING
    id,
    organization_id,
    name,
    description,
    nodes,
    created_at,
    updated_at
`

type UpdateEntityTransformationParams struct {
        ID          uuid.UUID   `json:"id"`
        Name        *string     `json:"name"`
        Description pgtype.Text `json:"description"`
        Nodes       []byte      `json:"nodes"`
}

type UpdateEntityTransformationRow struct {
        ID             uuid.UUID   `json:"id"`
        OrganizationID uuid.UUID   `json:"organization_id"`
        Name           string      `json:"name"`
        Description    pgtype.Text `json:"description"`
        Nodes          []byte      `json:"nodes"`
        CreatedAt      time.Time   `json:"created_at"`
        UpdatedAt      time.Time   `json:"updated_at"`
}

func (q *Queries) UpdateEntityTransformation(ctx context.Context, arg UpdateEntityTransformationParams) (UpdateEntityTransformationRow, error) {
        row := q.db.QueryRow(ctx, UpdateEntityTransformation,
                arg.ID,
                arg.Name,
                arg.Description,
                arg.Nodes,
        )
        var i UpdateEntityTransformationRow
        err := row.Scan(
                &i.ID,
                &i.OrganizationID,
                &i.Name,
                &i.Description,
                &i.Nodes,
                &i.CreatedAt,
                &i.UpdatedAt,
        )
        return i, err
}

const DeleteEntityTransformation = `-- name: DeleteEntityTransformation :exec
DELETE FROM entity_transformations
WHERE id = $1
`

func (q *Queries) DeleteEntityTransformation(ctx context.Context, id uuid.UUID) error {
        _, err := q.db.Exec(ctx, DeleteEntityTransformation, id)
        return err
}
