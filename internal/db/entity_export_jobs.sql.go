// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: entity_export_jobs.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const InsertEntityExportJob = `-- name: InsertEntityExportJob :exec

INSERT INTO entity_export_jobs (
    id,
    organization_id,
    job_type,
    entity_type,
    transformation_id,
    filters,
    rows_requested,
    status
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    'PENDING'
)
`

type InsertEntityExportJobParams struct {
	ID               uuid.UUID   `json:"id"`
	OrganizationID   uuid.UUID   `json:"organization_id"`
	JobType          string      `json:"job_type"`
	EntityType       pgtype.Text `json:"entity_type"`
	TransformationID pgtype.UUID `json:"transformation_id"`
	Filters          []byte      `json:"filters"`
	RowsRequested    int32       `json:"rows_requested"`
}

// Track background export jobs for entities.
func (q *Queries) InsertEntityExportJob(ctx context.Context, arg InsertEntityExportJobParams) error {
	_, err := q.db.Exec(ctx, InsertEntityExportJob,
		arg.ID,
		arg.OrganizationID,
		arg.JobType,
		arg.EntityType,
		arg.TransformationID,
		arg.Filters,
		arg.RowsRequested,
	)
	return err
}

const InsertEntityExportLog = `-- name: InsertEntityExportLog :exec
INSERT INTO entity_export_logs (
    export_job_id,
    organization_id,
    row_identifier,
    error_message
) VALUES (
    $1,
    $2,
    $3,
    $4
)
`

type InsertEntityExportLogParams struct {
	ExportJobID    uuid.UUID   `json:"export_job_id"`
	OrganizationID uuid.UUID   `json:"organization_id"`
	RowIdentifier  pgtype.Text `json:"row_identifier"`
	ErrorMessage   string      `json:"error_message"`
}

func (q *Queries) InsertEntityExportLog(ctx context.Context, arg InsertEntityExportLogParams) error {
	_, err := q.db.Exec(ctx, InsertEntityExportLog,
		arg.ExportJobID,
		arg.OrganizationID,
		arg.RowIdentifier,
		arg.ErrorMessage,
	)
	return err
}

const ListEntityExportJobsByStatus = `-- name: ListEntityExportJobsByStatus :many
SELECT
    id,
    organization_id,
    job_type,
    entity_type,
    transformation_id,
    filters,
    rows_requested,
    rows_exported,
    file_path,
    file_mime_type,
    file_byte_size,
    status,
    error_message,
    enqueued_at,
    started_at,
    completed_at,
    updated_at
FROM entity_export_jobs
WHERE status = ANY($1::text[])
  AND ($2::uuid IS NULL OR organization_id = $2)
ORDER BY enqueued_at DESC
LIMIT $4 OFFSET $3
`

type ListEntityExportJobsByStatusParams struct {
	Statuses       []string    `json:"statuses"`
	OrganizationID pgtype.UUID `json:"organization_id"`
	PageOffset     int32       `json:"page_offset"`
	PageLimit      int32       `json:"page_limit"`
}

func (q *Queries) ListEntityExportJobsByStatus(ctx context.Context, arg ListEntityExportJobsByStatusParams) ([]EntityExportJob, error) {
	rows, err := q.db.Query(ctx, ListEntityExportJobsByStatus,
		arg.Statuses,
		arg.OrganizationID,
		arg.PageOffset,
		arg.PageLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EntityExportJob{}
	for rows.Next() {
		var i EntityExportJob
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.JobType,
			&i.EntityType,
			&i.TransformationID,
			&i.Filters,
			&i.RowsRequested,
			&i.RowsExported,
			&i.FilePath,
			&i.FileMimeType,
			&i.FileByteSize,
			&i.Status,
			&i.ErrorMessage,
			&i.EnqueuedAt,
			&i.StartedAt,
			&i.CompletedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListEntityExportLogsForJob = `-- name: ListEntityExportLogsForJob :many
SELECT
    id,
    export_job_id,
    organization_id,
    row_identifier,
    error_message,
    created_at
FROM entity_export_logs
WHERE export_job_id = $1
ORDER BY created_at ASC
`

func (q *Queries) ListEntityExportLogsForJob(ctx context.Context, exportJobID uuid.UUID) ([]EntityExportLog, error) {
	rows, err := q.db.Query(ctx, ListEntityExportLogsForJob, exportJobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EntityExportLog{}
	for rows.Next() {
		var i EntityExportLog
		if err := rows.Scan(
			&i.ID,
			&i.ExportJobID,
			&i.OrganizationID,
			&i.RowIdentifier,
			&i.ErrorMessage,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const MarkEntityExportJobCompleted = `-- name: MarkEntityExportJobCompleted :exec
UPDATE entity_export_jobs
SET status = 'COMPLETED',
    rows_exported = $1,
    file_path = $2,
    file_mime_type = $3,
    file_byte_size = $4,
    completed_at = NOW(),
    updated_at = NOW(),
    error_message = NULL
WHERE id = $5
`

type MarkEntityExportJobCompletedParams struct {
	RowsExported int32       `json:"rows_exported"`
	FilePath     pgtype.Text `json:"file_path"`
	FileMimeType pgtype.Text `json:"file_mime_type"`
	FileByteSize pgtype.Int8 `json:"file_byte_size"`
	ID           uuid.UUID   `json:"id"`
}

func (q *Queries) MarkEntityExportJobCompleted(ctx context.Context, arg MarkEntityExportJobCompletedParams) error {
	_, err := q.db.Exec(ctx, MarkEntityExportJobCompleted,
		arg.RowsExported,
		arg.FilePath,
		arg.FileMimeType,
		arg.FileByteSize,
		arg.ID,
	)
	return err
}

const MarkEntityExportJobFailed = `-- name: MarkEntityExportJobFailed :exec
UPDATE entity_export_jobs
SET status = 'FAILED',
    error_message = $1,
    completed_at = NOW(),
    updated_at = NOW()
WHERE id = $2
`

type MarkEntityExportJobFailedParams struct {
	ErrorMessage pgtype.Text `json:"error_message"`
	ID           uuid.UUID   `json:"id"`
}

func (q *Queries) MarkEntityExportJobFailed(ctx context.Context, arg MarkEntityExportJobFailedParams) error {
	_, err := q.db.Exec(ctx, MarkEntityExportJobFailed, arg.ErrorMessage, arg.ID)
	return err
}

const MarkEntityExportJobRunning = `-- name: MarkEntityExportJobRunning :exec
UPDATE entity_export_jobs
SET status = 'RUNNING',
    started_at = NOW(),
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) MarkEntityExportJobRunning(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, MarkEntityExportJobRunning, id)
	return err
}

const UpdateEntityExportJobProgress = `-- name: UpdateEntityExportJobProgress :exec
UPDATE entity_export_jobs
SET rows_exported = $1,
    rows_requested = $2,
    updated_at = NOW()
WHERE id = $3
`

type UpdateEntityExportJobProgressParams struct {
	RowsExported  int32     `json:"rows_exported"`
	RowsRequested int32     `json:"rows_requested"`
	ID            uuid.UUID `json:"id"`
}

func (q *Queries) UpdateEntityExportJobProgress(ctx context.Context, arg UpdateEntityExportJobProgressParams) error {
	_, err := q.db.Exec(ctx, UpdateEntityExportJobProgress, arg.RowsExported, arg.RowsRequested, arg.ID)
	return err
}
