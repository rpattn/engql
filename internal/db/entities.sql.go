// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: entities.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateEntity = `-- name: CreateEntity :one
INSERT INTO entities (organization_id, entity_type, path, properties)
VALUES ($1, $2, $3, $4)
RETURNING id, organization_id, entity_type, path, properties, created_at, updated_at
`

type CreateEntityParams struct {
	OrganizationID uuid.UUID       `json:"organization_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
}

func (q *Queries) CreateEntity(ctx context.Context, arg CreateEntityParams) (Entity, error) {
	row := q.db.QueryRow(ctx, CreateEntity,
		arg.OrganizationID,
		arg.EntityType,
		arg.Path,
		arg.Properties,
	)
	var i Entity
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.EntityType,
		&i.Path,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteEntity = `-- name: DeleteEntity :exec
DELETE FROM entities
WHERE id = $1
`

func (q *Queries) DeleteEntity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteEntity, id)
	return err
}

const FilterEntitiesByProperty = `-- name: FilterEntitiesByProperty :many
SELECT id, organization_id, entity_type, path, properties, created_at, updated_at
FROM entities
WHERE organization_id = $1 
AND properties @> $2
`

type FilterEntitiesByPropertyParams struct {
	OrganizationID uuid.UUID       `json:"organization_id"`
	Properties     json.RawMessage `json:"properties"`
}

func (q *Queries) FilterEntitiesByProperty(ctx context.Context, arg FilterEntitiesByPropertyParams) ([]Entity, error) {
	rows, err := q.db.Query(ctx, FilterEntitiesByProperty, arg.OrganizationID, arg.Properties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entity{}
	for rows.Next() {
		var i Entity
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetEntity = `-- name: GetEntity :one
SELECT id, organization_id, entity_type, path, properties, created_at, updated_at
FROM entities
WHERE id = $1
`

func (q *Queries) GetEntity(ctx context.Context, id uuid.UUID) (Entity, error) {
	row := q.db.QueryRow(ctx, GetEntity, id)
	var i Entity
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.EntityType,
		&i.Path,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetEntityAncestors = `-- name: GetEntityAncestors :many
SELECT id, organization_id, entity_type, path, properties, created_at, updated_at
FROM entities
WHERE organization_id = $1
  AND path @> $2::ltree
  AND path <> $2::ltree
ORDER BY nlevel(path)
`

type GetEntityAncestorsParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Column2        string    `json:"column_2"`
}

func (q *Queries) GetEntityAncestors(ctx context.Context, arg GetEntityAncestorsParams) ([]Entity, error) {
	rows, err := q.db.Query(ctx, GetEntityAncestors, arg.OrganizationID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entity{}
	for rows.Next() {
		var i Entity
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetEntityChildren = `-- name: GetEntityChildren :many
SELECT id, organization_id, entity_type, path, properties, created_at, updated_at
FROM entities
WHERE organization_id = $1 AND path ~ ($2 || '.*{1}')::lquery
`

type GetEntityChildrenParams struct {
	OrganizationID uuid.UUID   `json:"organization_id"`
	Column2        pgtype.Text `json:"column_2"`
}

func (q *Queries) GetEntityChildren(ctx context.Context, arg GetEntityChildrenParams) ([]Entity, error) {
	rows, err := q.db.Query(ctx, GetEntityChildren, arg.OrganizationID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entity{}
	for rows.Next() {
		var i Entity
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetEntityCount = `-- name: GetEntityCount :one
SELECT COUNT(*)
FROM entities
WHERE organization_id = $1
`

func (q *Queries) GetEntityCount(ctx context.Context, organizationID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, GetEntityCount, organizationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const GetEntityCountByType = `-- name: GetEntityCountByType :one
SELECT COUNT(*)
FROM entities
WHERE organization_id = $1 AND entity_type = $2
`

type GetEntityCountByTypeParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	EntityType     string    `json:"entity_type"`
}

func (q *Queries) GetEntityCountByType(ctx context.Context, arg GetEntityCountByTypeParams) (int64, error) {
	row := q.db.QueryRow(ctx, GetEntityCountByType, arg.OrganizationID, arg.EntityType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const GetEntityDescendants = `-- name: GetEntityDescendants :many
SELECT id, organization_id, entity_type, path, properties, created_at, updated_at
FROM entities
WHERE organization_id = $1 AND path ~ ($2 || '.*')::lquery
`

type GetEntityDescendantsParams struct {
	OrganizationID uuid.UUID   `json:"organization_id"`
	Column2        pgtype.Text `json:"column_2"`
}

func (q *Queries) GetEntityDescendants(ctx context.Context, arg GetEntityDescendantsParams) ([]Entity, error) {
	rows, err := q.db.Query(ctx, GetEntityDescendants, arg.OrganizationID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entity{}
	for rows.Next() {
		var i Entity
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetEntitySiblings = `-- name: GetEntitySiblings :many
SELECT id, organization_id, entity_type, path, properties, created_at, updated_at
FROM entities
WHERE organization_id = $1 AND path ~ ($2 || '.*{1}')::lquery
`

type GetEntitySiblingsParams struct {
	OrganizationID uuid.UUID   `json:"organization_id"`
	Column2        pgtype.Text `json:"column_2"`
}

func (q *Queries) GetEntitySiblings(ctx context.Context, arg GetEntitySiblingsParams) ([]Entity, error) {
	rows, err := q.db.Query(ctx, GetEntitySiblings, arg.OrganizationID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entity{}
	for rows.Next() {
		var i Entity
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListEntities = `-- name: ListEntities :many
SELECT id, organization_id, entity_type, path, properties, created_at, updated_at
FROM entities
WHERE organization_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListEntities(ctx context.Context, organizationID uuid.UUID) ([]Entity, error) {
	rows, err := q.db.Query(ctx, ListEntities, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entity{}
	for rows.Next() {
		var i Entity
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListEntitiesByType = `-- name: ListEntitiesByType :many
SELECT id, organization_id, entity_type, path, properties, created_at, updated_at
FROM entities
WHERE organization_id = $1 AND entity_type = $2
ORDER BY created_at DESC
`

type ListEntitiesByTypeParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	EntityType     string    `json:"entity_type"`
}

func (q *Queries) ListEntitiesByType(ctx context.Context, arg ListEntitiesByTypeParams) ([]Entity, error) {
	rows, err := q.db.Query(ctx, ListEntitiesByType, arg.OrganizationID, arg.EntityType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entity{}
	for rows.Next() {
		var i Entity
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateEntity = `-- name: UpdateEntity :one
UPDATE entities
SET entity_type = $2, path = $3, properties = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, organization_id, entity_type, path, properties, created_at, updated_at
`

type UpdateEntityParams struct {
	ID         uuid.UUID       `json:"id"`
	EntityType string          `json:"entity_type"`
	Path       string          `json:"path"`
	Properties json.RawMessage `json:"properties"`
}

func (q *Queries) UpdateEntity(ctx context.Context, arg UpdateEntityParams) (Entity, error) {
	row := q.db.QueryRow(ctx, UpdateEntity,
		arg.ID,
		arg.EntityType,
		arg.Path,
		arg.Properties,
	)
	var i Entity
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.EntityType,
		&i.Path,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
