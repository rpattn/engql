// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: entities.sql

package db

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateEntity = `-- name: CreateEntity :one
INSERT INTO entities (organization_id, schema_id, entity_type, path, properties)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, organization_id, schema_id, entity_type, path, properties, version, created_at, updated_at
`

type CreateEntityParams struct {
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
}

type CreateEntityRow struct {
	ID             uuid.UUID       `json:"id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	Version        int64           `json:"version"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

func (q *Queries) CreateEntity(ctx context.Context, arg CreateEntityParams) (CreateEntityRow, error) {
	row := q.db.QueryRow(ctx, CreateEntity,
		arg.OrganizationID,
		arg.SchemaID,
		arg.EntityType,
		arg.Path,
		arg.Properties,
	)
	var i CreateEntityRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SchemaID,
		&i.EntityType,
		&i.Path,
		&i.Properties,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteEntity = `-- name: DeleteEntity :exec
DELETE FROM entities
WHERE id = $1
`

func (q *Queries) DeleteEntity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteEntity, id)
	return err
}

const FilterEntitiesByProperty = `-- name: FilterEntitiesByProperty :many
SELECT id, organization_id, schema_id, entity_type, path, properties, version, created_at, updated_at
FROM entities
WHERE organization_id = $1 
AND properties @> $2
`

type FilterEntitiesByPropertyParams struct {
	OrganizationID uuid.UUID       `json:"organization_id"`
	Properties     json.RawMessage `json:"properties"`
}

type FilterEntitiesByPropertyRow struct {
	ID             uuid.UUID       `json:"id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	Version        int64           `json:"version"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

func (q *Queries) FilterEntitiesByProperty(ctx context.Context, arg FilterEntitiesByPropertyParams) ([]FilterEntitiesByPropertyRow, error) {
	rows, err := q.db.Query(ctx, FilterEntitiesByProperty, arg.OrganizationID, arg.Properties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FilterEntitiesByPropertyRow{}
	for rows.Next() {
		var i FilterEntitiesByPropertyRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.SchemaID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetEntitiesByIDs = `-- name: GetEntitiesByIDs :many
SELECT id, organization_id, schema_id, entity_type, path, properties, version, created_at, updated_at
FROM entities
WHERE id = ANY($1::uuid[])
`

type GetEntitiesByIDsRow struct {
	ID             uuid.UUID       `json:"id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	Version        int64           `json:"version"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

func (q *Queries) GetEntitiesByIDs(ctx context.Context, ids []uuid.UUID) ([]GetEntitiesByIDsRow, error) {
	rows, err := q.db.Query(ctx, GetEntitiesByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEntitiesByIDsRow{}
	for rows.Next() {
		var i GetEntitiesByIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.SchemaID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetEntity = `-- name: GetEntity :one
SELECT id, organization_id, schema_id, entity_type, path, properties, version, created_at, updated_at
FROM entities
WHERE id = $1
`

type GetEntityRow struct {
	ID             uuid.UUID       `json:"id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	Version        int64           `json:"version"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

func (q *Queries) GetEntity(ctx context.Context, id uuid.UUID) (GetEntityRow, error) {
	row := q.db.QueryRow(ctx, GetEntity, id)
	var i GetEntityRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SchemaID,
		&i.EntityType,
		&i.Path,
		&i.Properties,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetEntityAncestors = `-- name: GetEntityAncestors :many
SELECT id, organization_id, schema_id, entity_type, path, properties, version, created_at, updated_at
FROM entities
WHERE organization_id = $1
  AND path @> $2::ltree
  AND path <> $2::ltree
ORDER BY nlevel(path)
`

type GetEntityAncestorsParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Column2        string    `json:"column_2"`
}

type GetEntityAncestorsRow struct {
	ID             uuid.UUID       `json:"id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	Version        int64           `json:"version"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

func (q *Queries) GetEntityAncestors(ctx context.Context, arg GetEntityAncestorsParams) ([]GetEntityAncestorsRow, error) {
	rows, err := q.db.Query(ctx, GetEntityAncestors, arg.OrganizationID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEntityAncestorsRow{}
	for rows.Next() {
		var i GetEntityAncestorsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.SchemaID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetEntityByReference = `-- name: GetEntityByReference :one
SELECT id, organization_id, schema_id, entity_type, path, properties, version, created_at, updated_at
FROM entities
WHERE organization_id = $1
  AND entity_type = $2
  AND properties ->> $3::text = $4::text
LIMIT 1
`

type GetEntityByReferenceParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	EntityType     string    `json:"entity_type"`
	FieldName      string    `json:"field_name"`
	ReferenceValue string    `json:"reference_value"`
}

type GetEntityByReferenceRow struct {
	ID             uuid.UUID       `json:"id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	Version        int64           `json:"version"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

func (q *Queries) GetEntityByReference(ctx context.Context, arg GetEntityByReferenceParams) (GetEntityByReferenceRow, error) {
	row := q.db.QueryRow(ctx, GetEntityByReference,
		arg.OrganizationID,
		arg.EntityType,
		arg.FieldName,
		arg.ReferenceValue,
	)
	var i GetEntityByReferenceRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SchemaID,
		&i.EntityType,
		&i.Path,
		&i.Properties,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetEntityChildren = `-- name: GetEntityChildren :many
SELECT id, organization_id, schema_id, entity_type, path, properties, version, created_at, updated_at
FROM entities
WHERE organization_id = $1 AND path ~ ($2 || '.*{1}')::lquery
`

type GetEntityChildrenParams struct {
	OrganizationID uuid.UUID   `json:"organization_id"`
	Column2        pgtype.Text `json:"column_2"`
}

type GetEntityChildrenRow struct {
	ID             uuid.UUID       `json:"id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	Version        int64           `json:"version"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

func (q *Queries) GetEntityChildren(ctx context.Context, arg GetEntityChildrenParams) ([]GetEntityChildrenRow, error) {
	rows, err := q.db.Query(ctx, GetEntityChildren, arg.OrganizationID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEntityChildrenRow{}
	for rows.Next() {
		var i GetEntityChildrenRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.SchemaID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetEntityCount = `-- name: GetEntityCount :one
SELECT COUNT(*)
FROM entities
WHERE organization_id = $1
`

func (q *Queries) GetEntityCount(ctx context.Context, organizationID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, GetEntityCount, organizationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const GetEntityCountByType = `-- name: GetEntityCountByType :one
SELECT COUNT(*)
FROM entities
WHERE organization_id = $1 AND entity_type = $2
`

type GetEntityCountByTypeParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	EntityType     string    `json:"entity_type"`
}

func (q *Queries) GetEntityCountByType(ctx context.Context, arg GetEntityCountByTypeParams) (int64, error) {
	row := q.db.QueryRow(ctx, GetEntityCountByType, arg.OrganizationID, arg.EntityType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const GetEntityDescendants = `-- name: GetEntityDescendants :many
SELECT id, organization_id, schema_id, entity_type, path, properties, version, created_at, updated_at
FROM entities
WHERE organization_id = $1 AND path ~ ($2 || '.*')::lquery
`

type GetEntityDescendantsParams struct {
	OrganizationID uuid.UUID   `json:"organization_id"`
	Column2        pgtype.Text `json:"column_2"`
}

type GetEntityDescendantsRow struct {
	ID             uuid.UUID       `json:"id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	Version        int64           `json:"version"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

func (q *Queries) GetEntityDescendants(ctx context.Context, arg GetEntityDescendantsParams) ([]GetEntityDescendantsRow, error) {
	rows, err := q.db.Query(ctx, GetEntityDescendants, arg.OrganizationID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEntityDescendantsRow{}
	for rows.Next() {
		var i GetEntityDescendantsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.SchemaID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetEntityHistoryByVersion = `-- name: GetEntityHistoryByVersion :one
SELECT id, entity_id, organization_id, schema_id, entity_type, path, properties, created_at, updated_at, version, change_type, changed_at, reason
FROM entities_history
WHERE entity_id = $1 AND version = $2
`

type GetEntityHistoryByVersionParams struct {
	EntityID uuid.UUID `json:"entity_id"`
	Version  int64     `json:"version"`
}

func (q *Queries) GetEntityHistoryByVersion(ctx context.Context, arg GetEntityHistoryByVersionParams) (EntitiesHistory, error) {
	row := q.db.QueryRow(ctx, GetEntityHistoryByVersion, arg.EntityID, arg.Version)
	var i EntitiesHistory
	err := row.Scan(
		&i.ID,
		&i.EntityID,
		&i.OrganizationID,
		&i.SchemaID,
		&i.EntityType,
		&i.Path,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
		&i.ChangeType,
		&i.ChangedAt,
		&i.Reason,
	)
	return i, err
}

const GetEntitySiblings = `-- name: GetEntitySiblings :many
SELECT id, organization_id, schema_id, entity_type, path, properties, version, created_at, updated_at
FROM entities
WHERE organization_id = $1 AND path ~ ($2 || '.*{1}')::lquery
`

type GetEntitySiblingsParams struct {
	OrganizationID uuid.UUID   `json:"organization_id"`
	Column2        pgtype.Text `json:"column_2"`
}

type GetEntitySiblingsRow struct {
	ID             uuid.UUID       `json:"id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	Version        int64           `json:"version"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

func (q *Queries) GetEntitySiblings(ctx context.Context, arg GetEntitySiblingsParams) ([]GetEntitySiblingsRow, error) {
	rows, err := q.db.Query(ctx, GetEntitySiblings, arg.OrganizationID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEntitySiblingsRow{}
	for rows.Next() {
		var i GetEntitySiblingsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.SchemaID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetMaxEntityHistoryVersion = `-- name: GetMaxEntityHistoryVersion :one
SELECT COALESCE(MAX(version), 0)::BIGINT
FROM entities_history
WHERE entity_id = $1
`

func (q *Queries) GetMaxEntityHistoryVersion(ctx context.Context, entityID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, GetMaxEntityHistoryVersion, entityID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const InsertEntityHistoryRecord = `-- name: InsertEntityHistoryRecord :exec
INSERT INTO entities_history (
    entity_id,
    organization_id,
    schema_id,
    entity_type,
    path,
    properties,
    created_at,
    updated_at,
    version,
    change_type,
    reason
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type InsertEntityHistoryRecordParams struct {
	EntityID       uuid.UUID       `json:"entity_id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
	Version        int64           `json:"version"`
	ChangeType     string          `json:"change_type"`
	Reason         pgtype.Text     `json:"reason"`
}

func (q *Queries) InsertEntityHistoryRecord(ctx context.Context, arg InsertEntityHistoryRecordParams) error {
	_, err := q.db.Exec(ctx, InsertEntityHistoryRecord,
		arg.EntityID,
		arg.OrganizationID,
		arg.SchemaID,
		arg.EntityType,
		arg.Path,
		arg.Properties,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Version,
		arg.ChangeType,
		arg.Reason,
	)
	return err
}

const ListEntities = `-- name: ListEntities :many
SELECT
    id,
    organization_id,
    schema_id,
    entity_type,
    path,
    properties,
    version,
    created_at,
    updated_at,
    COUNT(*) OVER() AS total_count
FROM entities
WHERE organization_id = $1
  AND (
        $2::text = ''
        OR entity_type = $2::text
    )
  AND (
        COALESCE(array_length($3::text[], 1), 0) = 0
        OR (
            SELECT bool_and(COALESCE((properties ->> filters.key) ILIKE filters.value, false))
            FROM (
                SELECT keys.key, values.value
                FROM unnest(COALESCE($3::text[], ARRAY[]::text[])) WITH ORDINALITY AS keys(key, ord)
                JOIN unnest(COALESCE($4::text[], ARRAY[]::text[])) WITH ORDINALITY AS values(value, ord)
                  ON keys.ord = values.ord
            ) AS filters
        )
    )
  AND (
        $5::text = ''
        OR entity_type ILIKE $5::text
        OR path::text ILIKE $5::text
        OR properties::text ILIKE $5::text
    )
ORDER BY
    CASE
        WHEN $6::text = 'created_at' AND $7::text = 'asc'
            THEN created_at
    END ASC,
    CASE
        WHEN $6::text = 'created_at' AND $7::text = 'desc'
            THEN created_at
    END DESC,
    CASE
        WHEN $6::text = 'updated_at' AND $7::text = 'asc'
            THEN updated_at
    END ASC,
    CASE
        WHEN $6::text = 'updated_at' AND $7::text = 'desc'
            THEN updated_at
    END DESC,
    CASE
        WHEN $6::text = 'entity_type' AND $7::text = 'asc'
            THEN LOWER(entity_type)
    END ASC,
    CASE
        WHEN $6::text = 'entity_type' AND $7::text = 'desc'
            THEN LOWER(entity_type)
    END DESC,
    CASE
        WHEN $6::text = 'path' AND $7::text = 'asc'
            THEN path::text
    END ASC,
    CASE
        WHEN $6::text = 'path' AND $7::text = 'desc'
            THEN path::text
    END DESC,
    CASE
        WHEN $6::text = 'version' AND $7::text = 'asc'
            THEN version
    END ASC,
    CASE
        WHEN $6::text = 'version' AND $7::text = 'desc'
            THEN version
    END DESC,
    CASE
        WHEN $6::text = 'property' AND $7::text = 'asc'
            THEN LOWER(COALESCE(properties ->> $8::text, ''))
    END ASC,
    CASE
        WHEN $6::text = 'property' AND $7::text = 'desc'
            THEN LOWER(COALESCE(properties ->> $8::text, ''))
    END DESC,
    created_at DESC
LIMIT $10 OFFSET $9
`

type ListEntitiesParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	EntityType     string    `json:"entity_type"`
	PropertyKeys   []string  `json:"property_keys"`
	PropertyValues []string  `json:"property_values"`
	TextSearch     string    `json:"text_search"`
	SortField      string    `json:"sort_field"`
	SortDirection  string    `json:"sort_direction"`
	SortProperty   string    `json:"sort_property"`
	PageOffset     int32     `json:"page_offset"`
	PageLimit      int32     `json:"page_limit"`
}

type ListEntitiesRow struct {
	ID             uuid.UUID       `json:"id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	Version        int64           `json:"version"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
	TotalCount     int64           `json:"total_count"`
}

func (q *Queries) ListEntities(ctx context.Context, arg ListEntitiesParams) ([]ListEntitiesRow, error) {
	rows, err := q.db.Query(ctx, ListEntities,
		arg.OrganizationID,
		arg.EntityType,
		arg.PropertyKeys,
		arg.PropertyValues,
		arg.TextSearch,
		arg.SortField,
		arg.SortDirection,
		arg.SortProperty,
		arg.PageOffset,
		arg.PageLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEntitiesRow{}
	for rows.Next() {
		var i ListEntitiesRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.SchemaID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListEntitiesByReferences = `-- name: ListEntitiesByReferences :many
SELECT id, organization_id, schema_id, entity_type, path, properties, version, created_at, updated_at
FROM entities
WHERE organization_id = $1
  AND entity_type = $2
  AND properties ->> $3::text = ANY($4::text[])
`

type ListEntitiesByReferencesParams struct {
	OrganizationID  uuid.UUID `json:"organization_id"`
	EntityType      string    `json:"entity_type"`
	FieldName       string    `json:"field_name"`
	ReferenceValues []string  `json:"reference_values"`
}

type ListEntitiesByReferencesRow struct {
	ID             uuid.UUID       `json:"id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	Version        int64           `json:"version"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

func (q *Queries) ListEntitiesByReferences(ctx context.Context, arg ListEntitiesByReferencesParams) ([]ListEntitiesByReferencesRow, error) {
	rows, err := q.db.Query(ctx, ListEntitiesByReferences,
		arg.OrganizationID,
		arg.EntityType,
		arg.FieldName,
		arg.ReferenceValues,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEntitiesByReferencesRow{}
	for rows.Next() {
		var i ListEntitiesByReferencesRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.SchemaID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListEntitiesByType = `-- name: ListEntitiesByType :many
SELECT
    id,
    organization_id,
    schema_id,
    entity_type,
    path,
    properties,
    version,
    created_at,
    updated_at
FROM entities
WHERE organization_id = $1
  AND entity_type = $2
ORDER BY created_at DESC
`

type ListEntitiesByTypeParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	EntityType     string    `json:"entity_type"`
}

type ListEntitiesByTypeRow struct {
	ID             uuid.UUID       `json:"id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	Version        int64           `json:"version"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

func (q *Queries) ListEntitiesByType(ctx context.Context, arg ListEntitiesByTypeParams) ([]ListEntitiesByTypeRow, error) {
	rows, err := q.db.Query(ctx, ListEntitiesByType, arg.OrganizationID, arg.EntityType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEntitiesByTypeRow{}
	for rows.Next() {
		var i ListEntitiesByTypeRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.SchemaID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListEntityHistory = `-- name: ListEntityHistory :many
SELECT id, entity_id, organization_id, schema_id, entity_type, path, properties, created_at, updated_at, version, change_type, changed_at, reason
FROM entities_history
WHERE entity_id = $1
ORDER BY version DESC
`

func (q *Queries) ListEntityHistory(ctx context.Context, entityID uuid.UUID) ([]EntitiesHistory, error) {
	rows, err := q.db.Query(ctx, ListEntityHistory, entityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EntitiesHistory{}
	for rows.Next() {
		var i EntitiesHistory
		if err := rows.Scan(
			&i.ID,
			&i.EntityID,
			&i.OrganizationID,
			&i.SchemaID,
			&i.EntityType,
			&i.Path,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Version,
			&i.ChangeType,
			&i.ChangedAt,
			&i.Reason,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateEntity = `-- name: UpdateEntity :one
UPDATE entities
SET schema_id = $2, entity_type = $3, path = $4, properties = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, organization_id, schema_id, entity_type, path, properties, version, created_at, updated_at
`

type UpdateEntityParams struct {
	ID         uuid.UUID       `json:"id"`
	SchemaID   uuid.UUID       `json:"schema_id"`
	EntityType string          `json:"entity_type"`
	Path       string          `json:"path"`
	Properties json.RawMessage `json:"properties"`
}

type UpdateEntityRow struct {
	ID             uuid.UUID       `json:"id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	Version        int64           `json:"version"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

func (q *Queries) UpdateEntity(ctx context.Context, arg UpdateEntityParams) (UpdateEntityRow, error) {
	row := q.db.QueryRow(ctx, UpdateEntity,
		arg.ID,
		arg.SchemaID,
		arg.EntityType,
		arg.Path,
		arg.Properties,
	)
	var i UpdateEntityRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.SchemaID,
		&i.EntityType,
		&i.Path,
		&i.Properties,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpsertEntityFromHistory = `-- name: UpsertEntityFromHistory :exec
INSERT INTO entities (id, organization_id, schema_id, entity_type, path, properties, version, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW())
ON CONFLICT (id) DO UPDATE
SET schema_id = EXCLUDED.schema_id,
    entity_type = EXCLUDED.entity_type,
    path = EXCLUDED.path,
    properties = EXCLUDED.properties,
    updated_at = NOW()
`

type UpsertEntityFromHistoryParams struct {
	ID             uuid.UUID       `json:"id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	SchemaID       uuid.UUID       `json:"schema_id"`
	EntityType     string          `json:"entity_type"`
	Path           string          `json:"path"`
	Properties     json.RawMessage `json:"properties"`
	Version        int64           `json:"version"`
	CreatedAt      time.Time       `json:"created_at"`
}

func (q *Queries) UpsertEntityFromHistory(ctx context.Context, arg UpsertEntityFromHistoryParams) error {
	_, err := q.db.Exec(ctx, UpsertEntityFromHistory,
		arg.ID,
		arg.OrganizationID,
		arg.SchemaID,
		arg.EntityType,
		arg.Path,
		arg.Properties,
		arg.Version,
		arg.CreatedAt,
	)
	return err
}
