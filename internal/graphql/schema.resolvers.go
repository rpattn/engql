package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/rpattn/engql/graph"
)

// LinkedEntities is the resolver for the linkedEntities field.
func (r *entityResolver) LinkedEntities(ctx context.Context, obj *graph.Entity) ([]*graph.Entity, error) {
	return r.Resolver.LinkedEntities(ctx, obj)
}

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input graph.CreateOrganizationInput) (*graph.Organization, error) {
	return r.Resolver.CreateOrganization(ctx, input)
}

// UpdateOrganization is the resolver for the updateOrganization field.
func (r *mutationResolver) UpdateOrganization(ctx context.Context, input graph.UpdateOrganizationInput) (*graph.Organization, error) {
	return r.Resolver.UpdateOrganization(ctx, input)
}

// DeleteOrganization deletes an organization
func (r *mutationResolver) DeleteOrganization(ctx context.Context, id string) (bool, error) {
	res, err := r.Resolver.DeleteOrganization(ctx, id)
	if err != nil {
		return false, err
	}
	if res == nil {
		return false, nil
	}
	return *res, nil
}

// CreateEntitySchema is the resolver for the createEntitySchema field.
func (r *mutationResolver) CreateEntitySchema(ctx context.Context, input graph.CreateEntitySchemaInput) (*graph.EntitySchema, error) {
	return r.Resolver.CreateEntitySchema(ctx, input)
}

// UpdateEntitySchema is the resolver for the updateEntitySchema field.
func (r *mutationResolver) UpdateEntitySchema(ctx context.Context, input graph.UpdateEntitySchemaInput) (*graph.EntitySchema, error) {
	return r.Resolver.UpdateEntitySchema(ctx, input)
}

// DeleteEntitySchema is the resolver for the deleteEntitySchema field.
func (r *mutationResolver) DeleteEntitySchema(ctx context.Context, id string) (bool, error) {
	res, err := r.Resolver.DeleteEntitySchema(ctx, id)
	if err != nil {
		return false, err
	}
	if res == nil {
		return false, nil
	}
	return *res, nil
}

// AddFieldToSchema is the resolver for the addFieldToSchema field.
func (r *mutationResolver) AddFieldToSchema(ctx context.Context, schemaID string, field graph.FieldDefinitionInput) (*graph.EntitySchema, error) {
	return r.Resolver.AddFieldToSchema(ctx, schemaID, field)
}

// RemoveFieldFromSchema is the resolver for the removeFieldFromSchema field.
func (r *mutationResolver) RemoveFieldFromSchema(ctx context.Context, schemaID string, fieldName string) (*graph.EntitySchema, error) {
	return r.Resolver.RemoveFieldFromSchema(ctx, schemaID, fieldName)
}

// RollbackEntity is the resolver for the rollbackEntity field.
func (r *mutationResolver) RollbackEntity(ctx context.Context, id string, toVersion int, reason *string) (*graph.Entity, error) {
	return r.Resolver.RollbackEntity(ctx, id, toVersion, reason)
}

// CreateEntity is the resolver for the createEntity field.
func (r *mutationResolver) CreateEntity(ctx context.Context, input graph.CreateEntityInput) (*graph.Entity, error) {
	return r.Resolver.CreateEntity(ctx, input)
}

// UpdateEntity is the resolver for the updateEntity field.
func (r *mutationResolver) UpdateEntity(ctx context.Context, input graph.UpdateEntityInput) (*graph.Entity, error) {
	return r.Resolver.UpdateEntity(ctx, input)
}

// DeleteEntity is the resolver for the deleteEntity field.
func (r *mutationResolver) DeleteEntity(ctx context.Context, id string) (bool, error) {
	res, err := r.Resolver.DeleteEntity(ctx, id)
	if err != nil {
		return false, err
	}
	if res == nil {
		return false, nil
	}
	return *res, nil
}

// CreateEntityJoinDefinition is the resolver for the createEntityJoinDefinition field.
func (r *mutationResolver) CreateEntityJoinDefinition(ctx context.Context, input graph.CreateEntityJoinDefinitionInput) (*graph.EntityJoinDefinition, error) {
	return r.Resolver.CreateEntityJoinDefinition(ctx, input)
}

// UpdateEntityJoinDefinition is the resolver for the updateEntityJoinDefinition field.
func (r *mutationResolver) UpdateEntityJoinDefinition(ctx context.Context, input graph.UpdateEntityJoinDefinitionInput) (*graph.EntityJoinDefinition, error) {
	return r.Resolver.UpdateEntityJoinDefinition(ctx, input)
}

// DeleteEntityJoinDefinition is the resolver for the deleteEntityJoinDefinition field.
func (r *mutationResolver) DeleteEntityJoinDefinition(ctx context.Context, id string) (bool, error) {
	res, err := r.Resolver.DeleteEntityJoinDefinition(ctx, id)
	if err != nil {
		return false, err
	}
	if res == nil {
		return false, nil
	}
	return *res, nil
}

// CreateEntityTransformation is the resolver for the createEntityTransformation field.
func (r *mutationResolver) CreateEntityTransformation(ctx context.Context, input graph.CreateEntityTransformationInput) (*graph.EntityTransformation, error) {
	return r.Resolver.CreateEntityTransformation(ctx, input)
}

// UpdateEntityTransformation is the resolver for the updateEntityTransformation field.
func (r *mutationResolver) UpdateEntityTransformation(ctx context.Context, input graph.UpdateEntityTransformationInput) (*graph.EntityTransformation, error) {
	return r.Resolver.UpdateEntityTransformation(ctx, input)
}

// DeleteEntityTransformation is the resolver for the deleteEntityTransformation field.
func (r *mutationResolver) DeleteEntityTransformation(ctx context.Context, id string) (bool, error) {
	res, err := r.Resolver.DeleteEntityTransformation(ctx, id)
	if err != nil {
		return false, err
	}
	if res == nil {
		return false, nil
	}
	return *res, nil
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context) ([]*graph.Organization, error) {
	return r.Resolver.Organizations(ctx)
}

// Organization is the resolver for the organization field.
func (r *queryResolver) Organization(ctx context.Context, id string) (*graph.Organization, error) {
	return r.Resolver.Organization(ctx, id)
}

// OrganizationByName is the resolver for the organizationByName field.
func (r *queryResolver) OrganizationByName(ctx context.Context, name string) (*graph.Organization, error) {
	return r.Resolver.OrganizationByName(ctx, name)
}

// EntitySchemas is the resolver for the entitySchemas field.
func (r *queryResolver) EntitySchemas(ctx context.Context, organizationID string) ([]*graph.EntitySchema, error) {
	return r.Resolver.EntitySchemas(ctx, organizationID)
}

// EntitySchema is the resolver for the entitySchema field.
func (r *queryResolver) EntitySchema(ctx context.Context, id string) (*graph.EntitySchema, error) {
	return r.Resolver.EntitySchema(ctx, id)
}

// EntitySchemaByName is the resolver for the entitySchemaByName field.
func (r *queryResolver) EntitySchemaByName(ctx context.Context, organizationID string, name string) (*graph.EntitySchema, error) {
	return r.Resolver.EntitySchemaByName(ctx, organizationID, name)
}

// EntitySchemaVersions is the resolver for the entitySchemaVersions field.
func (r *queryResolver) EntitySchemaVersions(ctx context.Context, organizationID string, name string) ([]*graph.EntitySchema, error) {
	return r.Resolver.EntitySchemaVersions(ctx, organizationID, name)
}

// Entities is the resolver for the entities field.
func (r *queryResolver) Entities(ctx context.Context, organizationID string, filter *graph.EntityFilter, pagination *graph.PaginationInput, sort *graph.EntitySortInput) (*graph.EntityConnection, error) {
	// Delegate to the Resolver-level function
	return r.Resolver.Entities(ctx, organizationID, filter, pagination, sort)
}

// Entity is the resolver for the entity field.
func (r *queryResolver) Entity(ctx context.Context, id string) (*graph.Entity, error) {
	return r.Resolver.GetEntity(ctx, id)
}

// EntitiesByType is the resolver for the entitiesByType field.
func (r *queryResolver) EntitiesByType(ctx context.Context, organizationID string, entityType string) ([]*graph.Entity, error) {
	return r.Resolver.EntitiesByType(ctx, organizationID, entityType)
}

// EntitiesByIDs is the resolver for the entitiesByIDs field.
func (r *queryResolver) EntitiesByIDs(ctx context.Context, ids []string) ([]*graph.Entity, error) {
	return r.Resolver.EntitiesByIDs(ctx, ids)
}

// EntityDiff is the resolver for the entityDiff field.
func (r *queryResolver) EntityDiff(ctx context.Context, id string, baseVersion int, targetVersion int) (*graph.EntityDiffResult, error) {
	return r.Resolver.EntityDiff(ctx, id, baseVersion, targetVersion)
}

// EntityHistory is the resolver for the entityHistory field.
func (r *queryResolver) EntityHistory(ctx context.Context, id string) ([]*graph.EntitySnapshotView, error) {
	return r.Resolver.EntityHistory(ctx, id)
}

// GetEntityAncestors is the resolver for the getEntityAncestors field.
func (r *queryResolver) GetEntityAncestors(ctx context.Context, entityID string) ([]*graph.Entity, error) {
	return r.Resolver.GetEntityAncestors(ctx, entityID)
}

// GetEntityDescendants is the resolver for the getEntityDescendants field.
func (r *queryResolver) GetEntityDescendants(ctx context.Context, entityID string) ([]*graph.Entity, error) {
	return r.Resolver.GetEntityDescendants(ctx, entityID)
}

// GetEntityChildren is the resolver for the getEntityChildren field.
func (r *queryResolver) GetEntityChildren(ctx context.Context, entityID string) ([]*graph.Entity, error) {
	return r.Resolver.GetEntityChildren(ctx, entityID)
}

// GetEntitySiblings is the resolver for the getEntitySiblings field.
func (r *queryResolver) GetEntitySiblings(ctx context.Context, entityID string) ([]*graph.Entity, error) {
	return r.Resolver.GetEntitySiblings(ctx, entityID)
}

// GetEntityHierarchy is the resolver for the getEntityHierarchy field.
func (r *queryResolver) GetEntityHierarchy(ctx context.Context, entityID string) (*graph.EntityHierarchy, error) {
	return r.Resolver.GetEntityHierarchy(ctx, entityID)
}

// SearchEntitiesByProperty is the resolver for the searchEntitiesByProperty field.
func (r *queryResolver) SearchEntitiesByProperty(ctx context.Context, organizationID string, propertyKey string, propertyValue string) ([]*graph.Entity, error) {
	// Call the Resolver-level function that contains the actual logic
	return r.Resolver.SearchEntitiesByProperty(ctx, organizationID, propertyKey, propertyValue)
}

// SearchEntitiesByMultipleProperties is the resolver for the searchEntitiesByMultipleProperties field.
func (r *queryResolver) SearchEntitiesByMultipleProperties(ctx context.Context, organizationID string, filters string) ([]*graph.Entity, error) {
	var filterMap map[string]any
	if err := json.Unmarshal([]byte(filters), &filterMap); err != nil {
		return nil, fmt.Errorf("invalid filters JSON: %w", err)
	}

	return r.Resolver.SearchEntitiesByMultipleProperties(ctx, organizationID, filterMap)
}

// SearchEntitiesByPropertyRange is the resolver for the searchEntitiesByPropertyRange field.
func (r *queryResolver) SearchEntitiesByPropertyRange(ctx context.Context, organizationID string, propertyKey string, minValue *float64, maxValue *float64) ([]*graph.Entity, error) {
	return r.Resolver.SearchEntitiesByPropertyRange(ctx, organizationID, propertyKey, minValue, maxValue)
}

// SearchEntitiesByPropertyExists is the resolver for the searchEntitiesByPropertyExists field.
func (r *queryResolver) SearchEntitiesByPropertyExists(ctx context.Context, organizationID string, propertyKey string) ([]*graph.Entity, error) {
	return r.Resolver.SearchEntitiesByPropertyExists(ctx, organizationID, propertyKey)
}

// SearchEntitiesByPropertyContains is the resolver for the searchEntitiesByPropertyContains field.
func (r *queryResolver) SearchEntitiesByPropertyContains(ctx context.Context, organizationID string, propertyKey string, searchTerm string) ([]*graph.Entity, error) {
	return r.Resolver.SearchEntitiesByPropertyContains(ctx, organizationID, propertyKey, searchTerm)
}

// ValidateEntityAgainstSchema is the resolver for the validateEntityAgainstSchema field.
func (r *queryResolver) ValidateEntityAgainstSchema(ctx context.Context, entityID string) (*graph.ValidationResult, error) {
	return r.Resolver.ValidateEntityAgainstSchema(ctx, entityID)
}

// EntityJoinDefinition is the resolver for the entityJoinDefinition field.
func (r *queryResolver) EntityJoinDefinition(ctx context.Context, id string) (*graph.EntityJoinDefinition, error) {
	return r.Resolver.EntityJoinDefinition(ctx, id)
}

// EntityJoinDefinitions is the resolver for the entityJoinDefinitions field.
func (r *queryResolver) EntityJoinDefinitions(ctx context.Context, organizationID string) ([]*graph.EntityJoinDefinition, error) {
	return r.Resolver.EntityJoinDefinitions(ctx, organizationID)
}

// ExecuteEntityJoin is the resolver for the executeEntityJoin field.
func (r *queryResolver) ExecuteEntityJoin(ctx context.Context, input graph.ExecuteEntityJoinInput) (*graph.EntityJoinConnection, error) {
	return r.Resolver.ExecuteEntityJoin(ctx, input)
}

// EntityTransformation is the resolver for the entityTransformation field.
func (r *queryResolver) EntityTransformation(ctx context.Context, id string) (*graph.EntityTransformation, error) {
	return r.Resolver.EntityTransformation(ctx, id)
}

// EntityTransformations is the resolver for the entityTransformations field.
func (r *queryResolver) EntityTransformations(ctx context.Context, organizationID string) ([]*graph.EntityTransformation, error) {
	return r.Resolver.EntityTransformations(ctx, organizationID)
}

// ExecuteEntityTransformation is the resolver for the executeEntityTransformation field.
func (r *queryResolver) ExecuteEntityTransformation(ctx context.Context, input graph.ExecuteEntityTransformationInput) (*graph.EntityTransformationConnection, error) {
	return r.Resolver.ExecuteEntityTransformation(ctx, input)
}

// Entity returns graph.EntityResolver implementation.
func (r *Resolver) Entity() graph.EntityResolver { return &entityResolver{r} }

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type entityResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
