package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"graphql-engineering-api/graph"
)

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input graph.CreateOrganizationInput) (*graph.Organization, error) {
	panic(fmt.Errorf("not implemented: CreateOrganization - createOrganization"))
}

// UpdateOrganization is the resolver for the updateOrganization field.
func (r *mutationResolver) UpdateOrganization(ctx context.Context, input graph.UpdateOrganizationInput) (*graph.Organization, error) {
	panic(fmt.Errorf("not implemented: UpdateOrganization - updateOrganization"))
}

// DeleteOrganization is the resolver for the deleteOrganization field.
func (r *mutationResolver) DeleteOrganization(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteOrganization - deleteOrganization"))
}

// CreateEntitySchema is the resolver for the createEntitySchema field.
func (r *mutationResolver) CreateEntitySchema(ctx context.Context, input graph.CreateEntitySchemaInput) (*graph.EntitySchema, error) {
	panic(fmt.Errorf("not implemented: CreateEntitySchema - createEntitySchema"))
}

// UpdateEntitySchema is the resolver for the updateEntitySchema field.
func (r *mutationResolver) UpdateEntitySchema(ctx context.Context, input graph.UpdateEntitySchemaInput) (*graph.EntitySchema, error) {
	panic(fmt.Errorf("not implemented: UpdateEntitySchema - updateEntitySchema"))
}

// DeleteEntitySchema is the resolver for the deleteEntitySchema field.
func (r *mutationResolver) DeleteEntitySchema(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteEntitySchema - deleteEntitySchema"))
}

// AddFieldToSchema is the resolver for the addFieldToSchema field.
func (r *mutationResolver) AddFieldToSchema(ctx context.Context, schemaID string, field graph.FieldDefinitionInput) (*graph.EntitySchema, error) {
	panic(fmt.Errorf("not implemented: AddFieldToSchema - addFieldToSchema"))
}

// RemoveFieldFromSchema is the resolver for the removeFieldFromSchema field.
func (r *mutationResolver) RemoveFieldFromSchema(ctx context.Context, schemaID string, fieldName string) (*graph.EntitySchema, error) {
	panic(fmt.Errorf("not implemented: RemoveFieldFromSchema - removeFieldFromSchema"))
}

// CreateEntity is the resolver for the createEntity field.
func (r *mutationResolver) CreateEntity(ctx context.Context, input graph.CreateEntityInput) (*graph.Entity, error) {
	panic(fmt.Errorf("not implemented: CreateEntity - createEntity"))
}

// UpdateEntity is the resolver for the updateEntity field.
func (r *mutationResolver) UpdateEntity(ctx context.Context, input graph.UpdateEntityInput) (*graph.Entity, error) {
	panic(fmt.Errorf("not implemented: UpdateEntity - updateEntity"))
}

// DeleteEntity is the resolver for the deleteEntity field.
func (r *mutationResolver) DeleteEntity(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteEntity - deleteEntity"))
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context) ([]*graph.Organization, error) {
	panic(fmt.Errorf("not implemented: Organizations - organizations"))
}

// Organization is the resolver for the organization field.
func (r *queryResolver) Organization(ctx context.Context, id string) (*graph.Organization, error) {
	panic(fmt.Errorf("not implemented: Organization - organization"))
}

// OrganizationByName is the resolver for the organizationByName field.
func (r *queryResolver) OrganizationByName(ctx context.Context, name string) (*graph.Organization, error) {
	panic(fmt.Errorf("not implemented: OrganizationByName - organizationByName"))
}

// EntitySchemas is the resolver for the entitySchemas field.
func (r *queryResolver) EntitySchemas(ctx context.Context, organizationID string) ([]*graph.EntitySchema, error) {
	panic(fmt.Errorf("not implemented: EntitySchemas - entitySchemas"))
}

// EntitySchema is the resolver for the entitySchema field.
func (r *queryResolver) EntitySchema(ctx context.Context, id string) (*graph.EntitySchema, error) {
	panic(fmt.Errorf("not implemented: EntitySchema - entitySchema"))
}

// EntitySchemaByName is the resolver for the entitySchemaByName field.
func (r *queryResolver) EntitySchemaByName(ctx context.Context, organizationID string, name string) (*graph.EntitySchema, error) {
	panic(fmt.Errorf("not implemented: EntitySchemaByName - entitySchemaByName"))
}

// Entities is the resolver for the entities field.
func (r *queryResolver) Entities(ctx context.Context, organizationID string, filter *graph.EntityFilter, pagination *graph.PaginationInput) (*graph.EntityConnection, error) {
	panic(fmt.Errorf("not implemented: Entities - entities"))
}

// Entity is the resolver for the entity field.
func (r *queryResolver) Entity(ctx context.Context, id string) (*graph.Entity, error) {
	panic(fmt.Errorf("not implemented: Entity - entity"))
}

// EntitiesByType is the resolver for the entitiesByType field.
func (r *queryResolver) EntitiesByType(ctx context.Context, organizationID string, entityType string) ([]*graph.Entity, error) {
	panic(fmt.Errorf("not implemented: EntitiesByType - entitiesByType"))
}

// GetEntityAncestors is the resolver for the getEntityAncestors field.
func (r *queryResolver) GetEntityAncestors(ctx context.Context, entityID string) ([]*graph.Entity, error) {
	panic(fmt.Errorf("not implemented: GetEntityAncestors - getEntityAncestors"))
}

// GetEntityDescendants is the resolver for the getEntityDescendants field.
func (r *queryResolver) GetEntityDescendants(ctx context.Context, entityID string) ([]*graph.Entity, error) {
	panic(fmt.Errorf("not implemented: GetEntityDescendants - getEntityDescendants"))
}

// GetEntityChildren is the resolver for the getEntityChildren field.
func (r *queryResolver) GetEntityChildren(ctx context.Context, entityID string) ([]*graph.Entity, error) {
	panic(fmt.Errorf("not implemented: GetEntityChildren - getEntityChildren"))
}

// GetEntitySiblings is the resolver for the getEntitySiblings field.
func (r *queryResolver) GetEntitySiblings(ctx context.Context, entityID string) ([]*graph.Entity, error) {
	panic(fmt.Errorf("not implemented: GetEntitySiblings - getEntitySiblings"))
}

// GetEntityHierarchy is the resolver for the getEntityHierarchy field.
func (r *queryResolver) GetEntityHierarchy(ctx context.Context, entityID string) (*graph.EntityHierarchy, error) {
	panic(fmt.Errorf("not implemented: GetEntityHierarchy - getEntityHierarchy"))
}

// SearchEntitiesByProperty is the resolver for the searchEntitiesByProperty field.
func (r *queryResolver) SearchEntitiesByProperty(ctx context.Context, organizationID string, propertyKey string, propertyValue string) ([]*graph.Entity, error) {
	panic(fmt.Errorf("not implemented: SearchEntitiesByProperty - searchEntitiesByProperty"))
}

// SearchEntitiesByMultipleProperties is the resolver for the searchEntitiesByMultipleProperties field.
func (r *queryResolver) SearchEntitiesByMultipleProperties(ctx context.Context, organizationID string, filters string) ([]*graph.Entity, error) {
	panic(fmt.Errorf("not implemented: SearchEntitiesByMultipleProperties - searchEntitiesByMultipleProperties"))
}

// SearchEntitiesByPropertyRange is the resolver for the searchEntitiesByPropertyRange field.
func (r *queryResolver) SearchEntitiesByPropertyRange(ctx context.Context, organizationID string, propertyKey string, minValue *float64, maxValue *float64) ([]*graph.Entity, error) {
	panic(fmt.Errorf("not implemented: SearchEntitiesByPropertyRange - searchEntitiesByPropertyRange"))
}

// SearchEntitiesByPropertyExists is the resolver for the searchEntitiesByPropertyExists field.
func (r *queryResolver) SearchEntitiesByPropertyExists(ctx context.Context, organizationID string, propertyKey string) ([]*graph.Entity, error) {
	panic(fmt.Errorf("not implemented: SearchEntitiesByPropertyExists - searchEntitiesByPropertyExists"))
}

// SearchEntitiesByPropertyContains is the resolver for the searchEntitiesByPropertyContains field.
func (r *queryResolver) SearchEntitiesByPropertyContains(ctx context.Context, organizationID string, propertyKey string, searchTerm string) ([]*graph.Entity, error) {
	panic(fmt.Errorf("not implemented: SearchEntitiesByPropertyContains - searchEntitiesByPropertyContains"))
}

// ValidateEntityAgainstSchema is the resolver for the validateEntityAgainstSchema field.
func (r *queryResolver) ValidateEntityAgainstSchema(ctx context.Context, entityID string) (*graph.ValidationResult, error) {
	panic(fmt.Errorf("not implemented: ValidateEntityAgainstSchema - validateEntityAgainstSchema"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
